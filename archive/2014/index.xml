<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2014 on Goldstine研究所</title>
    <link>https://mosuke.tech/archive/2014/</link>
    <description>Recent content in 2014 on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 31 Dec 2014 17:05:00 +0900</lastBuildDate>
    
	<atom:link href="https://mosuke.tech/archive/2014/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SSHでローカルポートフォワードを実際に試す</title>
      <link>https://mosuke.tech/entry/2014/12/31/170545/</link>
      <pubDate>Wed, 31 Dec 2014 17:05:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/12/31/170545/</guid>
      <description>SSH・・・
いろんなことができる&amp;rdquo;らしい&amp;rdquo;ということは知っていたし、
例えばポートフォワーディングなんていうこともできるのも知っている。
でもそれがどんなものなのか自分の手で試したことはないし、
なんとなくただのサーバログインツールとして利用していた。
サーバインフラ技術に興味を持つようになっていろんなことを勉強していると、
ポートフォワーディングは必須な技術であることも感じ、
年末の持て余す時間を使ってSSHのローカルポートフォワードを試してみたのでメモする。
環境とやりたいこと 
ローカルPCからexample.jpは以下で接続できる状態。
[local pc] $ ssh username@example.jp  またWebサーバのポート番号は80で、VPSのホストサーバからはWebサーバへ接続できる。
CUIなのでわかりづらいがcurlを打つとHello Worldが返ってきている。
[example.jp] $ curl 192.168.33.10 &amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello World! Virtual Web Server&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;  ローカルポートフォワードの実行 ローカルPCから以下を実行する。
以下のコマンドは、
ローカルPCのポート8888での接続はexample.jpからみて「192.168.33.10のポート80」に飛ばす
といったもの。
[local pc] $ ssh -L8888:192.168.33.10:80 username@example.jp  この状態でブラウザからhttp://localhost:8888にアクセスすると
なんと、ローカルホストにつないだはずが、example.jp上の仮想Webサーバのhtmlがうつっているではないか…

セキュリティはどうなの？ ローカルの端末からhttpで仮想のWebサーバに接続しているけど、セキュリティはだいじょうぶなのだろうか？
http通信だから暗号化はされていないのだろうか？
なんて疑問もあるが、それは問題ない。
SSHでローカルPCからリモートホスト(example.jp)までトンネルをはり、
そのなかをhttpで通信しているから全く問題なしといえる。
ローカルポートフォワードを利用する場合は、おそらく表には出したくないけど、
ローカルから接続したいなどの要件の時に使うと思うけど、SSHできちんと暗号化しているので安心。
最後に SSHでできることはこの他にもたくさんある。
ポートフォワードだけみても他にも「リモートポートフォワード」や「ダイナミックポートフォワード」などがある。
リモートポートなどはいまぱっと試せる環境がなかったのでおいおい実践してみる…
SSHをただのログインツールだけに留めるのは今年で終わりにしよう…</description>
    </item>
    
    <item>
      <title>【年末遊び】秋葉原で自作PCパーツ集めて作った</title>
      <link>https://mosuke.tech/entry/2014/12/29/154251/</link>
      <pubDate>Mon, 29 Dec 2014 15:42:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/12/29/154251/</guid>
      <description>自作PCを作ったのでその材料と参考資料などを簡単にまとめる。
すべての部品は秋葉原のツクモで揃えた。
パソコン・ゲームPC・自作パソコンなら【TSUKUMO】 わけがあって荷物はすべて手で運んだのだが、かなり重くなるので郵送をおすすめする。
以下買ったパーツ一式や用意した道具。
ちなみに全部で54000円程度でした。（お店で買うとセット割などがあったため）
材料・パーツ一式 マザーボード 
ASUSTeK Intel H97チップセット搭載マザーボード H97-PRO 【ATX】
  出版社/メーカー: Asustek   発売日: 2014/05/17  メディア: Personal Computers この商品を含むブログを見る      CPU 
Intel CPU Core-i3-4160 3.60GHz 3Mキャッシュ LGA1150 BX80646I34160 【BOX】
  出版社/メーカー: インテル   発売日: 2014/07/27  メディア: Personal Computers この商品を含むブログを見る    
 メモリ 価格.com - Team TED38192M1600C11DC [DDR3 PC3-12800 4GB 2枚組] 価格比較</description>
    </item>
    
    <item>
      <title>【VPS1台でインフラ勉強】SoftEtherを使ってVPN構築</title>
      <link>https://mosuke.tech/entry/2014/12/07/212156/</link>
      <pubDate>Sun, 07 Dec 2014 21:21:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/12/07/212156/</guid>
      <description>VPS1台でインフラ勉強シリーズでVPN構築を行ったのでそのメモ。
1. 実施したこと VPSのホストサーバをVPSサーバとし、その上で仮想で立ち上げたサーバ(ローカルネットワーク)に外部から接続できるようにすること。
 
  2. 環境 ・VPNソフトウェア：SoftEther VPN プロジェクト - SoftEther VPN プロジェクト
・メモリ：１GB
・CPU：仮想２コア
・HDD：100GB
・OS：CentOS7
・サーバ仮想化：Vagrant(Utuntu13)
 3. SoftEtherのインストール インストール手順は公式ドキュメント通りなので簡単にコマンドのみ記述しておく。
7.3 Linux へのインストールと初期設定 - SoftEther VPN プロジェクト
【ダウンロードしたもの】
ここから環境に応じて対象のソフトウェアを選ぶ
SoftEther ダウンロード センター
・コンポーネント：SoftEther VPN Server
・プラットフォーム：Linux
・CPU：Intel x86 / AMD64(64bit)
## ダウンロード $ wget ttp://jp.softether-download.com/files/softether/v4.08-9449-rtm-2014.06.08-tree/Linux/SoftEther%20VPN%20Server/64bit%20-%20Intel%20x64%20or%20AMD64/softether-vpnserver-v4.08-9449-rtm-2014.06.08-linux-x64-64bit.tar.gz ## 解凍 $ tar zxvf softether-vpnserver-v4.08-9449-rtm-2014.06.08-linux-x64-64bit.tar.gz ## 実行可能ファイル作成 $ cd vpnserver/ $ sudo make ## /usr/localへ配置 $ sudo mv vpnserver /usr/local ## パーミッション変更 ### 基本的には600。実行ファイルのみ700 $ cd /usr/local/vpnserver $ sudo chown root:root .</description>
    </item>
    
    <item>
      <title>Ansible, sudoパスワード要求を忘れただけでめんどくなる</title>
      <link>https://mosuke.tech/entry/2014/11/28/001748/</link>
      <pubDate>Fri, 28 Nov 2014 00:17:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/28/001748/</guid>
      <description>AnsibleをVagrant上でずっと使ってて、Playbookも完成したし本番サーバへ&amp;hellip;
と思ったところである初歩的な罠にハマった。
本番環境へPalybook実行！！
$ ansible-playbook playbook.yml -i hosts  あれ、GATHERING FACTSで10分以上も待たされた&amp;hellip;
しかも、エラー出た&amp;hellip;
GATHERING FACTS failed to parse [ sudo via ansible, key= ..... ]  sudoできていない&amp;hellip;？
playbook内のsudo: yesを外して実行。
GATHERING FACTSは通過。
しかし、当たり前だがsudo で実行すべき部分で失敗&amp;hellip;
とても単純なことに気づいた&amp;hellip;
・Vagrant環境ではsudoのパスワードを要求されない
・本番環境はsudoのパスワードを要求されること
・sudoのパスワードを入力するようにしていなかったこと
というわけで-Kをつけて実行
$ ansible-playbook playbook.yml -i hosts -K  うまくいった&amp;hellip;
完全なる私のミスなんだが、ただ-Kオプションを忘れるだけで、一回の実行に10分ほども待たされるのは…。
しかもGATHERING FACTSで止まっているときはCtl+Cで中断も聞かなかった。
要注意ですね。。。
ちなみに、こんな方法で解決もできる。
sudoのパスワードを聞かれなくして対応。
# visudo user_name ALL=(ALL) NOPASSWD: ALL</description>
    </item>
    
    <item>
      <title>GithubクローンのGitlabの導入とその際のちょっとした注意点</title>
      <link>https://mosuke.tech/entry/2014/11/22/190648/</link>
      <pubDate>Sat, 22 Nov 2014 19:06:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/22/190648/</guid>
      <description>もろもろな理由のためにGithubが利用できないことも多くあると思う。
というわけでGithubクローンのGitlabを試しに立ててみたが、簡単すぎでした…
GitLab | Open source software to collaborate on code
環境
さくらVPS 1Gプラン
OS：CentOS7
インストール
基本的にはドキュメントに書いてある以下のとおりで終わり。
$ curl -O https://downloads-packages.s3.amazonaws.com/centos-7.0.1406/gitlab-7.5.1_omnibus.5.2.0.ci-1.el7.x86_64.rpm $ sudo yum install openssh-server $ sudo systemctl enable sshd $ sudo systemctl start sshd $ sudo yum install postfix $ sudo systemctl enable postfix $ sudo systemctl start postfix $ sudo rpm -i gitlab-7.5.1_omnibus.5.2.0.ci-1.el7.x86_64.rpm $ sudo gitlab-ctl reconfigure $ sudo firewall-cmd --permanent --add-service=http # open up the firewall for HTTP and SSH requests $ sudo systemctl reload firewalld  しかし１つ気をつけないといけないことがある。</description>
    </item>
    
    <item>
      <title>後からGitレポジトリを共有設定に。sharedオプションの仕組みについて</title>
      <link>https://mosuke.tech/entry/2014/11/20/230334/</link>
      <pubDate>Thu, 20 Nov 2014 23:03:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/20/230334/</guid>
      <description>Gitレポジトリを作って、複数人で開発をしていた。
しかし、レポジトリの中に作成されるファイルやディレクトリが個人のグループになってしまい、
Push, PullするときにPermission errorで怒られまくる。
ユーザには共通のグループを作っていたのに…なんでだっけ…
気づけばレポジトリを作るとき以下のようにしていた。
$ git init --bare  複数人で共有するときには以下のようにするべきであった。
$ git init --bare --shared  では、そもそもgitのsharedオプションをつけると何が裏で起こっているのか。
調べると「setgid」というキーワードに辿り着いた。
setgidの権限を付けておくと、そのディレクトリに作成されたファイルの所有グループは、そのディレクトリの所有グループになる。
以下のようにchmodでsetgidを付けることができる。
$ chmod g+s dir_name  setgidがつくとあまり馴染みのない権限がつく。
「drwxrwsr-x」
$ ls -l drwxrwsr-x 4 user group 136 11 16 22:49 test_dir  そして、すでに共有設定なしで作ってしまったレポジトリでは以下のように対応可能。
（新しくレポジトリつくるのはめんどいので…）
##Gigレポジトリ内のディレクトリに $ chmod -R g+s ./branches $ chmod -R g+s ./hooks $ chmod -R g+s ./info $ chmod -R g+s ./objects $ chmod -R g+s .</description>
    </item>
    
    <item>
      <title>Ansible、コマンドでワイルドカードを使うときの注意</title>
      <link>https://mosuke.tech/entry/2014/11/18/225542/</link>
      <pubDate>Tue, 18 Nov 2014 22:55:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/18/225542/</guid>
      <description>AnsibleのPlaybookを書いていると、ワイルドカードを含んだコマンドを実行したい時がある。
そんなときあるところでハマった。
Apacheをソースインストールして、パスを/usr/sbinにリンクを貼ろうとして以下を実行した。
- command: ln -s /usr/local/httpd/bin/* /usr/sbin  /usr/sbin内に「*」というリンクが貼られてしまった。
* -&amp;gt; /usr/local/httpd/bin  どうやらcommandモジュールはワイルドカードに対応していないよう。
ワイルドカードを使いたいときはshellモジュールを利用すると良い。
- shell: ln -s /usr/local/httpd/bin/* /usr/sbin  また、*というリンクを消すときは要注意（笑）
$ rm ./*  とやってしまうとあたりまえだがやばいので
$ rm ./¥*  こうですね…</description>
    </item>
    
    <item>
      <title>Ansible、ソースインストールする際のPalybookの書き方</title>
      <link>https://mosuke.tech/entry/2014/11/16/153223/</link>
      <pubDate>Sun, 16 Nov 2014 15:32:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/16/153223/</guid>
      <description>最近、Ansibleを使い始めたのだが、yumやapt-getでインストールできるものはいいけど、
どうしてもソースインストールが必要な場合がある。
ソースインストールを行う際のPlaybookの書き方と注意点をまとめた。
まず、あたりまえだが、ソースインストールを行うには以下のフローを踏まなければいけな。
1. ソースファイルの取得(tarで固められていると仮定)
2. tarファイルの解凍
3. 解答してできたディレクトリへ移動
4. configure
5. make
6. make install
また、Ansibleでは何回もPlaybookを実行していくため、
すでにインストールされている場合は、インストールをスキップする必要がある。
yumやapt-getで管理されていれば上記を心配することはないのだが、やはりソースインストールだとこの壁がある。
※パッケージ化しろよ！というツッコミは禁止
今回は例として、ubuntu13にemacsをソースインストールするのを例としてみた。
環境 【Ansible実行側】
さくらVPSの1G
OS: Centos 7
IPアドレス:192.168.33.1
【設定対象側】
上記さくらVPS上にたてたVagrantの仮想サーバ
OS: Ubuntu 13.10
IPアドレス:192.168.33.100
 Playbook 以下playbookの例。
--- - hosts: 192.168.33.100 user: vagrant sudo: yes vars: src_dir: /usr/local/src emacs_ver: emacs-23.4 tasks: ## emacsのソースファイルを取得済みか確認 - name: check exist emacs source file command: ls -l {{src_dir}}/{{emacs_ver}}.tar.gz ignore_errors: True register: result1 ## emacsのソースファイル取得。ただし、すでに取得済みならスキップ - name: get emacs source file command: chdir={{src_dir}} wget http://mirror.</description>
    </item>
    
    <item>
      <title>【VPS1台でインフラ勉強】多段SSH設定（おまけ）</title>
      <link>https://mosuke.tech/entry/2014/11/09/172745/</link>
      <pubDate>Sun, 09 Nov 2014 17:27:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/09/172745/</guid>
      <description>VPS1台でインフラ勉強の会で、VPSのホストサーバ上に仮想でさらにいつくかのサーバを立てたが、
仮想のサーバにアクセスするには、ホストサーバにアクセスしてから更にSSHをしなければならない。
これが面倒だったので多段SSHの設定をして、一発でSSH接続できるようにした。
以下の図で言うと、web10, web11(192.168.33.10&amp;frasl;11)に一発でSSHできるようにする。

クライアントPC側に以下の設定をした。
$ vim ~/.ssh/config host gateway HostName xxxxx.xxx User username Host web10 HostName 192.168.33.10 User vagrant ProxyCommand ssh -W %h:%p gateway Host web11 HostName 192.168.33.11 User vagrant ProxyCommand ssh -W %h:%p gateway ##これで以下で接続可能 $ ssh web10 $ ssh web11  簡単でした。</description>
    </item>
    
    <item>
      <title>【VPS1台でインフラ勉強】HAProxyでロードバランサーを構築</title>
      <link>https://mosuke.tech/entry/2014/11/09/171436/</link>
      <pubDate>Sun, 09 Nov 2014 17:14:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/09/171436/</guid>
      <description>前回の【VPS1台でインフラ勉強】サーバ複数台構成、Nginxでリバースプロキシ構築に続き、同様の環境を用いて、ロードバランサ構築を行った。
ロードバランサの構築にはHAProxyを利用した。
1. 環境 前回同様で、さくらVPSの1GBのプラン1台のみ。
・メモリ：１GB
・CPU：仮想２コア
・HDD：100GB
・OS：CentOS7
・サーバ仮想化：Vagrant(Utuntu13)
・ロードバランサ：HAProxy - The Reliable, High Performance TCP/HTTP Load Balancer
 2. 構成図 
 3. ロードバランサの構築 ■ホストサーバ側の設定
#HAProxyインストール $ sudo yum install haproxy #設定はすごく簡単で以下のファイルのみ。実際に $ sudo vim /etc/haproxy/haproxy.cfg #--------------------------------------------------------------------- # Example configuration for a possible web application. See the # full configuration options online. # # http://haproxy.1wt.eu/download/1.4/doc/configuration.txt # #--------------------------------------------------------------------- #--------------------------------------------------------------------- # Global settings #--------------------------------------------------------------------- global log 127.0.0.1 local6 debug chroot /var/lib/haproxy pidfile /var/run/haproxy.</description>
    </item>
    
    <item>
      <title>自宅サーバ公開時などのDDNS、固定IPについて整理</title>
      <link>https://mosuke.tech/entry/2014/10/19/170854/</link>
      <pubDate>Sun, 19 Oct 2014 17:08:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/10/19/170854/</guid>
      <description>自宅サーバを公開するときに使うDDNSや固定IP。
それが必要な理由について図解的にまとめ。それだけ。</description>
    </item>
    
    <item>
      <title>【VPS1台でインフラ勉強】サーバ複数台構成、Nginxでリバースプロキシ構築</title>
      <link>https://mosuke.tech/entry/2014/10/09/230555/</link>
      <pubDate>Thu, 09 Oct 2014 23:05:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/10/09/230555/</guid>
      <description>ロードバランシングとかクラスタリングとかリバースプロキシとか、
業務でも使っているし、概念とかはわかってるけど、自分で構築したことはやっぱりない。
自分で構築してみたいなーと思いつつもあたりまえだけど、サーバやネットワーク機器をそう簡単に調達もできない。
お金も当然ない。
というわけで、さくらVPSで仮想化つかってロードバランシングとかクラスタリングとかリバースプロキシとか勉強しましょうという「サーバインフラ会」を友人と始めた。
その第１回目のメモ。
第1回 サーバ複数台構成、Nginxでリバースプロキシ構築
第2回 HAProxyでロードバランサ構築


1. 使用した環境 まず今回利用した環境は以下のとおり。
さくらVPSの1GBのプラン。
・メモリ：１GB
・CPU：仮想２コア
・HDD：100GB
・OS：CentOS7
・仮想化：Vagrant
→dockerなどもはじめ検討していたが、コンテナ型仮想化だとサーバ感がでないので、よりサーバとして意識できるVagrantを採用
【参考】
料金・サービス仕様 | VPS（仮想専用サーバ）は「さくらのVPS」
 2. 完成イメージ・物理イメージ 

 
 3. VagrantでWebサーバ２台分を構築する Vagrantの詳細な利用方法は公式ドキュメントをみてもらうとするが、セットアップまでのひととおりの流れと注意点のみ記載する。
Vagrant Documentation
今回はWebサーバ２台を仮想で実現するので、それぞれweb1, web2とする。
それぞれのディレクトリを作成。
## web1, web2のディレクトリ作成 $ pwd /home/vagrant $ mkdir web1 $ mkdir web2 ## 仮想化で利用するOSイメージをダウンロード $ vagrant box add ubuntu1310 ¥ http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-13.10_chef-provisionerless.box ## web1サーバ構築 $ cd web1 $ vagrant init ubuntu1310 ## ほぼほぼデフォルトの設定だが以下２つだけは設定を行った。 $ vim Vagrantfile # (1)プライベートアドレスの割り当て。 config.</description>
    </item>
    
    <item>
      <title>CentOS7, iptables設定でハマった</title>
      <link>https://mosuke.tech/entry/2014/09/20/180326/</link>
      <pubDate>Sat, 20 Sep 2014 18:03:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/09/20/180326/</guid>
      <description>最近VPSのOSをcentos7にしたのだが、なかなか手付かずでiptablesの設定も放置していた…
（sshの最低限の設定はしていたが、ほんとうに良くない…）
久しぶりに手が空いたので設定するかーと思いきや
まず/etc/sysconfig/iptablesがないし&amp;hellip;
Cent7からのsystemctlでiptablesのサービスを確認してもでてこないし…
# systemctl status iptables iptables.service Loaded: not-found (Reason: No such file or directory) Active: inactive (dead)  というわけで、調べてみると、まずiptables.serviceをインスールしないといけないとのこと。
そして、centos7からはfirewalldがデフォルトでオンになっているからオフにしないといけない。
（いけないわけではないけど両方使う意味が無いので。）
まずはiptables-serviceをインスールし、firewalldをオフ、iptablesをオンとした。
# yum install iptables-services # systemctl status firewalld Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled) Active: active (running) since Sat 2014-09-20 17:47:11 JST; 4s ago Main PID: 11162 (firewalld) CGroup: /system.slice/firewalld.service └─11162 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid # # systemctl stop firewalld # # systemctl status firewalld Loaded: loaded (/usr/lib/systemd/system/firewalld.</description>
    </item>
    
    <item>
      <title>D3.js、DBからのデータ連携方法の検討</title>
      <link>https://mosuke.tech/entry/2014/09/15/135611/</link>
      <pubDate>Mon, 15 Sep 2014 13:56:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/09/15/135611/</guid>
      <description>最近D3.jsを使う機会があり、DBのデータを読み込ませる方法についていくつか検討した。
例えば以下の状況を考える。
【やりたいこと】
「DBに格納されているデータを使って、D3.jsで折れ線グラフを描く」
【DBの構造】
カラム名：型
date : datetime
value : int
※また、下記ではSinatra上で行っているが、他の言語でも同様のことがいえる。
(1) 簡単なAPIのようなものを利用する 先に結論から書くと、今まで次の(2)(3)のようなやりかたをやっていたのだけれど、
これが一番複雑にならずに良いと思ったということ。
Sinatra側で/csvにアクセスするとcsvファイルをダウンロードできるようにする。
#Sinatra側 get &#39;/csv&#39; do content_type &#39;application/csv&#39; attachment &#39;download.csv&#39; #DBからデータ取得(Activerecord利用) @data = Model.all() #出力するCSVデータの変数。csvヘッダーを先につけている。 @csv = &amp;quot;date,value\n&amp;quot; #DBのデータをCSVの形にして格納 @data.each do |d| @csv += d.date.to_s + &amp;quot;,&amp;quot; + d.value.to_s + &amp;quot;\n&amp;quot; end #csvtest.erbというビューに出力 erb :csvtest, :layout =&amp;gt; false end  csvtest.erb
```ruby ``` こうすることで&#34;http://*****/csv&#34;にアクセスするとcsvファイルとしてダウンロードできる状態になる。
条件指定をしてデータをダウンロードできるようにしたい場合はGETでパラメータ指定できるようにすれば良いと思う。
（SinatraでCSVファイルを生成するところのコードがナンセンスだと思っているので、もっといい方法があるはず…）
また、今回はcsvにしているがjsonなどの他の形式でも同様のことがいえる。
これをD3.js側で以下のように読み込ませる。
d3.csv(&amp;quot;/csv&amp;quot;, function(error, data) { (中略) }  d3.</description>
    </item>
    
    <item>
      <title>2014/8/2 Arduino会を実施の報告</title>
      <link>https://mosuke.tech/entry/2014/09/13/214414/</link>
      <pubDate>Sat, 13 Sep 2014 21:44:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/09/13/214414/</guid>
      <description>2014年8月2日(土)に大学時代の研究室の同期・後輩を巻き込んでArduino勉強会を行った。
Arduinoをほとんど触ったことのないメンバーで実施したのだが、初心者でもプロダクトを作り上げられるところまでできた。
その勉強会の簡単な資料を掲載。</description>
    </item>
    
    <item>
      <title>【Ethernetシールド】Arduinoをネットワークへ繋げる(1)</title>
      <link>https://mosuke.tech/entry/2014/09/13/111537/</link>
      <pubDate>Sat, 13 Sep 2014 11:15:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/09/13/111537/</guid>
      <description>Ethernetシールドを使ってネットワークへ繋げる。
とりあえずは、スモールステップでPCとの1対1の通信。
PCとの1対1通信 構成図

Arduinoソースコード
#include &amp;lt;SPI.h&amp;gt; #include &amp;lt;Ethernet.h&amp;gt; byte MAC[] = {0x90,0xA2,0xDA,0x0F,0x8B,0xA2}; byte IP[] = {192,168,11,3}; void setup() { Ethernet.begin(MAC,IP); } void loop() { }  疎通確認
======= ```  4f3b2c72e32161441359f6d2116c410a27a8faaf % ping 192.168.100.3 PING 192.168.100.3 (192.168.100.3): 56 data bytes Request timeout for icmp_seq 0 64 bytes from 192.168.100.3: icmp_seq=1 ttl=128 time=0.576 ms 64 bytes from 192.168.100.3: icmp_seq=2 ttl=128 time=0.425 ms 64 bytes from 192.168.100.3: icmp_seq=3 ttl=128 time=0.</description>
    </item>
    
    <item>
      <title>【これだけは抑えておきたい】Arduino入門まとめ</title>
      <link>https://mosuke.tech/entry/2014/07/21/231946/</link>
      <pubDate>Mon, 21 Jul 2014 23:19:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/07/21/231946/</guid>
      <description>前々からArduino自体はもっていたし、ちょろっと触ったことはあったのだが、
大学時代の研究室の仲間とArduino勉強会をやることになり、それに向けて友人と再入門したのでそのときのメモ。
Arduino入門にこれだけは知っておきたい事項をプログラム形式にまとめた。
もちろん、不足部分もたくさんあるが、これだけわかれば楽しめるようになるかも。
以下が入門プログラム。
 LEDの点灯 PCとArduino間のシリアル通信 超音波距離センサの利用 超音波距離センサとLEDの組み合わせ Processingとの連携 電池でArduinoを動作させる  【用意したもの】
基本は以下の２つ
Arduinoをはじめようキット
  出版社/メーカー: スイッチサイエンス  メディア: エレクトロニクス  購入: 64人 クリック: 1,164回 この商品を含むブログ (51件) を見る     みんなのArduino入門：拡張キット
  出版社/メーカー: スイッチサイエンス  メディア: エレクトロニクス この商品を含むブログを見る     【参考にした書籍】
Arduinoをはじめよう 第2版 (Make:PROJECTS)
  作者: Massimo Banzi,船田巧  出版社/メーカー: オライリージャパン   発売日: 2012/03/16  メディア: 単行本（ソフトカバー）  購入: 9人 クリック: 27回 この商品を含むブログ (10件) を見る     みんなのArduino入門</description>
    </item>
    
    <item>
      <title>【雑記】VPSとお別れしました…</title>
      <link>https://mosuke.tech/entry/2014/05/18/142838/</link>
      <pubDate>Sun, 18 May 2014 14:28:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/05/18/142838/</guid>
      <description>2012年07月18日から契約していたVPSサーバを本日解約した。
約２年間の契約していたわけだがちょっと振り返るといろいろあったなーと思う。
ぼくがまだ大学３年のとき、ソーシャルブックマークサービスをリリースしたのだが、
その時はまだエンジニア初心者で、VPSではなく共有サーバを利用していた。
そんなプロジェクトが終わり、次のサービス(Twitterの解析ツール)の開発で初めてVPS環境を与えられたのだが、
サーバ構築など右も左もわからなかったので、自分の勉強用環境としてVPSを契約。VPS環境で行ったこと&amp;gt;
プロダクトとしては次の３つくらい作った
・Amazonの最安値段通知サービス
自分が欲しい物について希望価格を登録しておくと、Amazonの中古価格が希望価格を下回った時に通知してくれるサービス。
個人的には結構好きだったのだが、運用がめんどくさくなって閉鎖。
・うみなう ーTwitter上の「海なう」画像を眺めようー
夏場になるとTwitterで「海なう」と水着画像を付けて投稿する人が多い。
海なうのキーワードで出てきた画像をただただ眺めるだけのサービス(笑)
・キニナル ーきになるあの二人のツイートをー
Twitter上で気になる二人のツイート時系列で並べて監視するサービス。
公開はしていなかったけどちょくちょく身内でみていた。
こんなくだらないサービスを趣味で作っていた。
その他、仕事で使う新しいツールの実験導入などに利用していた。
社会人になってからリモートで接続できるサーバを持っている必要がなくなってきたので解約することになったが、
いろいろと勉強になったし、思い出がおおかったなー。
またいつか契約する日があることを待ち望んで…</description>
    </item>
    
    <item>
      <title>ロードバランサをロードバランスする</title>
      <link>https://mosuke.tech/entry/2014/05/17/221824/</link>
      <pubDate>Sat, 17 May 2014 22:18:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/05/17/221824/</guid>
      <description>ぼくはネットワーク構成については素人です。
大量のトラフィックをさばくためにロードバランサを使うがロードバランサが耐えられない量のトラフィックにはどうするか。
ちょっと疑問に思ったので素人なりにちょろっと考えてみた。</description>
    </item>
    
    <item>
      <title>ER図作成ツール-MySQL Workbench- を使ってみた</title>
      <link>https://mosuke.tech/entry/2014/05/06/192424/</link>
      <pubDate>Tue, 06 May 2014 19:24:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/05/06/192424/</guid>
      <description>表題の通りER図作成ツールというものを使ってみた。
開発をやる現場では当たり前のように使われているのかもしれないけど、ぼくは使ったことなかったです。
ER図とかテーブル構造はExcelでまとめて管理していました。
きっかけは、ソフトウエアデザインを読んでいてER図作成ツールなるものがでてきたので、便利そうと思ってぐぐってみた。
調べると主なフリーのER図作成ツールは以下があるっぽい。
 DBDesigner A5-SQLmk-2 AmaterasERD  MySQL Workbench ERMaster  (参考)http://treeapps.hatenablog.com/entry/20110505/p1
この中でMacで使えそうなのがMySQL Workbenchしかなかったのでこちらを利用。
本当はMySQL以外のDBMSにも対応しているものがよかったのだけど…
ざっと使ってみた感じ以下３つがよいと感じた点。
1.ER図作成が容易ER図作成ツールなのであたりまえなのだが、今までExcelの図形など使っていて書いていたので簡単さに驚き。
属性についてもそれぞれ型やキー・制約などの設定も記述できる。
2.DDLにすぐにエクスポート可能作成したER図についてはDDLにすぐにエクスポートできる。
なので、ツールでER図さえきちんと書けば実際のDB、テーブル構築は一瞬で可能。
3.イメージ図としてエクスポート可能作成したER図をPNG形式にエクスポートできるので、メンバー等との共有が容易。
また、ドキュメントとして残す際にもとても使えると思う。
Excelのシート形式にエクスポートできたらなぁとも思う…
実際にMySQL Workbenchを使って簡単にER図を作成してみた。
・ユーザが飲んだお酒を記録していくWebシステムです。
・利用するにはシステムへのユーザ登録が必要。
・ユーザはお酒マスターから飲んだお酒を登録する。
→同じお酒を何度登録（飲んでも）よい
・お酒には産地（都道府県）を記入する。
・ユーザは本システムへログイン後のアクセスログが取得される。
こんなざっくりとした感じ。
作成したER図はこんな感じに出来上がります（PNG）。

DDLはこんな感じに。
-- MySQL Script generated by MySQL Workbench -- Tue May 6 19:16:11 2014 -- Model: New Model Version: 1.0 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;TRADITIONAL,ALLOW_INVALID_DATES&#39;; -- ----------------------------------------------------- -- Schema mydb -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ; USE `mydb` ; -- ----------------------------------------------------- -- Table `mydb`.</description>
    </item>
    
    <item>
      <title>データベース、隔離性水準とはなにか</title>
      <link>https://mosuke.tech/entry/2014/03/30/004337/</link>
      <pubDate>Sun, 30 Mar 2014 00:43:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/03/30/004337/</guid>
      <description>データベースには、トランザクションが持つべき特性であるACID特性というものを備えている。
ACID特性
  A Atomicity 原始性   C Consistency 一貫性   I Isolation 隔離性   D Dirability 耐久性   ACID特性については詳しく書かないが、その中に隔離性という以下の特性がある。
「複数のトランザクションを並行して実行しても直列に実行した時と同じ結果になる。
また、トランザクション実行中は変更前の状態として見える。」
しかし、複数のトランザクションを並列で実行すると、その隔離性を満たさない現象が発生することがある。
その現象は主に３つある。
1. ダーティリード[概要]
あるトランザクションの処理中に、別のユーザがそのトランザクションでまだコミットしてないデータを読み込んでしまう現象のこと。
Q. 何が問題なの？
A. 例えばそのトランザクションがロールバックしたとすると、存在しない処理のデータを読み込んでいることになってしまう。[対策]
対策はシンプルで、まだコミットしていないデータは読み込めないようにするだけ。
つまり、データを更新するときは「排他ロック」をかけるようにするということ。

2. ノンリピータブルリード[概要]
同一トランザクション内で、一度読み込んだデータを再読み込みすると値が異なる現象。[対策]
データを読み込むときには「共有ロック」をかけるようにするということ。
共有ロック中は他トランザクションから更新はできなくなるのでノンリピータブルリードは起きない。

3. ファントムリード[概要]
あるトランザクションが複数行ある結果を返す検索条件で問合せを2度実行する間に、
コミットされた別のトランザクションによってその条件を満たす新しい行が挿入されたり、削除された行がでたりする現象。[対策]
検索結果の範囲に対してロックをかけること。
上記現象が起こらないようにトランザクションの分離レベルが用意されている。
トランザクションの分離レベルと、現象に発生の有無
  分離レベル ダーティリード ノンリピータブルリード ファントムリード   Read Uncommitted あり あり あり   Read Committed なし あり あり   Repeatable Read なし なし あり   Serializable なし なし なし   ここでひとつの疑問が…</description>
    </item>
    
    <item>
      <title>VLAN、Trunkを使った実践的な構成のメモ</title>
      <link>https://mosuke.tech/entry/2014/03/09/212520/</link>
      <pubDate>Sun, 09 Mar 2014 21:25:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/03/09/212520/</guid>
      <description>VLAN、Trunkそれぞれを一部分的に切り出した説明はよくあるが、
それらが組み合わさった実践的な構成についてあまり書いてないので、例を考えて載せてみる。

(1) L2スイッチに２つのシステムのサーバ（それぞれが冗長構成）がある。
(2) それぞれのシステムはVLANで切られている
(3) L2-L2間、L3-L2間はTrunkを使用(Vlan100,200)
(4) L3インターフェースはサブインタフェース利用
(5) L3の冗長はHSRPを利用
ほかにいろいろ思いついたら、付け加えます。</description>
    </item>
    
    <item>
      <title>【SQLテーブル結合】INNER JOIN とWHERE結合の違いについて その２</title>
      <link>https://mosuke.tech/entry/2014/02/28/233025/</link>
      <pubDate>Fri, 28 Feb 2014 23:30:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/02/28/233025/</guid>
      <description>前回の「【SQLテーブル結合】INNER JOIN とWHERE結合の違いについて」の続き。
やはりFROM句の後にテーブルを複数書いてWHEREで結合させるのはナンセンスだと思う。
例えば、内部結合に加え、外部結合もある場合を考える。
WHERE型
SELECT * FROM table1, table2 #←結合させたいもの LEFT OUTER JOIN ( ・ ・ &amp;lt;副問い合わせとか長いSQLが入ると想定&amp;gt; ・ ・ ) AS sub ON table1.id=sub.id AND table2.id=sub.id WHERE table1.id=table2.id #←結合条件  table1とtable2を内部結合させたいのに、
肝心の何と何を結合させるかの部分の&amp;rdquo;WHERE table1.id=table2.id&amp;rdquo;が離れてしまい、
SQL文全体として何をしたいかわかりずらい。
一方、INNER JOINなら
SELECT * FROM table1 INNER JOIN table2 ON table1.id=table2.id #←結合させたいものと結合条件が一緒 LEFT OUTER JOIN ( ・ ・ &amp;lt;副問い合わせとか長いSQLが入ると想定&amp;gt; ・ ・ ) AS sub ON table1.id=sub.id  上記のように、結合させたいテーブルと結合させる条件がくっつくため、
全体としてなにをしたいかわかりやすい気がする。
慣れの問題なのかもしれんが、圧倒的にINNER JOINだろ…</description>
    </item>
    
    <item>
      <title>【SQL テーブル結合】INNER JOIN とWHERE結合の違いについて</title>
      <link>https://mosuke.tech/entry/2014/02/28/232846/</link>
      <pubDate>Fri, 28 Feb 2014 23:28:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/02/28/232846/</guid>
      <description>テーブルを内部結合するとき、いつもINNER JOINを使って書いていたが、
「FROM句のあとに複数のテーブルを書いてWHERE句で絞り込む」やり方があることを知った。
INNER JOIN型
SELECT * FROM table1 INNER JOIN table2 ON table1.id=table2.id  WHERE型
SELECT * FROM table1 table2 WHERE table1.id=table2.id  結果的には同じだし、調べる限りだとどちらが良いとかメリット・デメリットとかないそう。
個人的には「何に何を結合しているのかわかりやすい」という点からINNER JOIN型をおすすめしたいところ。
DBスペシャリストの本とか問題みてるとだいたいWHERE型なので戸惑う…</description>
    </item>
    
  </channel>
</rss>