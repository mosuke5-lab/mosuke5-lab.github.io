<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2016 on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/archive/2016/</link>
    <description>Recent content in 2016 on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 25 Dec 2016 14:27:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/archive/2016/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>「嵐」 2016年振り返り</title>
      <link>https://blog.mosuke.tech/entry/2016/12/25/142744/</link>
      <pubDate>Sun, 25 Dec 2016 14:27:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/12/25/142744/</guid>
      <description>&lt;p&gt;&lt;body&gt;
&lt;p&gt;だいぶお久しぶりのブログ。
そして恒例の年振り返りブログ。ついに2016年も終わってしまう。&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;というわけで2016年を振り返りたいと思う。&lt;br&gt;
一応このサイトは技術ブログのはずなんだけど、プライベートのことが大いに混ざったポエムになってしまった。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>三葉よ、サーバーレス、それもまた結び。</title>
      <link>https://blog.mosuke.tech/entry/2016/10/02/212420/</link>
      <pubDate>Sun, 02 Oct 2016 21:24:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/10/02/212420/</guid>
      <description>タイトルちょっとふざけました。 (が、半分本気。最後の方でわかる。)
ServerlessConf Tokyoに参加してきた。
今年8月からパブリッククラウドの事業に異動していて、
開発者の立場よりクラウド提供側の立場として参加してきたので、また面白かった。
せっかくなので、自分なりにサーバレスについてまとめる。
新しいことというよりは、自分の中での整理した感じ。
1. サーバレスってなんだっけ カンファレンスの中でもサーバレスの定義についてはいろいろな意見がでていた。
Martin Fowlerのブログではサーバレスの定義として下記２つが書いてある。
 BaaS (Backend as a Service) : ex) firebase FaaS (Function as a Service) : ex) AWS Lambda  martinfowler.com
ですが、ここでは焦点を絞って話すためにもFaaSということにしておく。
主にFaaSについて話したいのと、BaaSもいれてしまうとSaaSもサーバレスとかややこしいことになるので。
 AWS Lambda なんといってもサーバレスの概念を推し進めたのはAWS Lambdaでしょう。
説明はいまさら不要だと思うが、少しだけ。
コードを AWS Lambda にアップロードすると、サービスが AWS インフラストラクチャを使用してコードの実行を代行するコンピューティングサービスです。コードをアップロードして、Lambda 関数と呼ばれる関数を作成することで、AWS Lambda がコードを実行するサーバーのプロビジョニングおよび管理を行います。(https://aws.amazon.com/jp/lambda/details/)
 課金モデルは関数呼び出した回数、および実行に利用したコンピュートのスペックによって決まる。
また特徴的なことは、AWSの他のサービスで発生したイベントをトリガーに実行できること。
例えば、Amazon S3にファイルアップロードされたことをトリガーにLambdaを実行できるのだ。
サーバレスの特徴 サーバレス自体そしてサーバレスで実装することの特徴しては下記がある。
  クラウド上のイベントを契機に実行できる 実行環境は、immutableで時間が立つと消える 実行環境は独立していて、コードは基本的にstatelessである 上記のようにimmutableでstatelessな構造につくるからこそスケールしやすい  2. どんな用途で利用しているか  クラウド基盤のイベントをトリガーとして 個人的に一番強力だと思っている使い方。上で説明したとおりだが、クラウド上のプロダクトに対してのイベントをトリガーに処理を行うことができる。</description>
    </item>
    
    <item>
      <title>ISUCON6予選で惨敗した. 足りなかったのは&#39;Courage&#39;</title>
      <link>https://blog.mosuke.tech/entry/2016/09/19/172009/</link>
      <pubDate>Mon, 19 Sep 2016 17:20:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/09/19/172009/</guid>
      <description>Appleのkeynoteで話題の&amp;rsquo;Courage&amp;lsquo;使ってみた笑
ISUCON6予選で惨敗した。(18000点くらい)
端的に言って、とても未熟だった。
とはいえ、とてもいい思い出になったのでまとめる。
メンバー スリーエムというチーム名で、@mogulla3と@mintsu123と一緒に出場した。
ふたりともぼくよりもアプリの改善などは10倍くらい優秀なエンジニアなので、
ぼくはインフラとか総務的な立ち回りをして、２人がチューニングに集中できるようにすることを心がけていた。
準備 準備は３週間の間に土日どちらかに集まってISUCONの過去問を解いたり戦略について事前に打ち合わせしてた。
 プライベートレポジトリの用意(Gitlab) チャットルームの用意(Slack) ISUCON4とISUCON5の予選の過去問解き  土日集まったときには戦略や振り返りを重視 実際の過去問ときは平日に各々が空いた時間などにやってた   基本戦略を準備  なんの技術を主に使うか だれが何を担当するか 定形作業の手順化 その他ナレッジなど    採用した技術   PHP 7.0  php-fpm Openresty(nginx) 1.11  MySQL 5.7 Redis 3.2  当日 出だしはとても順調だった。
Azure担当だったぼくはすぐにサーバをデプロイし、OSバージョンを確認した。
予想通りのUbuntu 16.04であったので、準備したとおり必要なミドルウェアのインストールをすませた。
ほぼ定石と言える下記（定形作業と呼んでいた）もすぐにこなすことができた。
 調査のための各種ログ出力化 Nginxでの静的ファイルの配信、キャッシュ化 Kataribeインストールと実行  MySQLのインデックスの付与と設定見直し  php-fpmのUnixドメインソケット化 デプロイの仕組みの整理 不要デーモンの停止  この状態でもスコアは0のままであり、少し焦りを感じたが、
ここからが本番のチューニング開始である。
Kataribeの結果から、GET /が改善ポイントであることは明らかなのはわかっていた。
Top 20 Sort By Count Count Total Mean Stddev Min P50.</description>
    </item>
    
    <item>
      <title>社内システム開発からパブリッククラウドの会社へジョインします</title>
      <link>https://blog.mosuke.tech/entry/2016/07/29/180000/</link>
      <pubDate>Fri, 29 Jul 2016 18:00:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/07/29/180000/</guid>
      <description>本日、2016年7月29日をもって、新卒から３年４ヶ月働いてきた部署が最後となり、8月1日から異動（出向）する。
社内転職制度を使って、自らの希望でパブリッククラウド事業の会社へジョインすることになった。
（新規事業を行う部署へ異動となり、そこから別会社へ出向という扱い）
グループ内の異動ではあるが、違う会社・事業で、職種も変わるので、今の部署でやってきたことをまとめて残しておこうと思う。
私は通信会社のネットワーク運用部隊に所属している（いた）。
ネットワーク運用部隊なのだが、私の部署はネットワーク運用を自動化したり運用を楽にするためのシステム開発を担うところで、下記のような仕事をしてきた。
1. ベンダーコントロールという仕事 システム開発にはうちでは外注物も内製物（後述）もある。
業務の都合上、システムの種類によってはSIベンダーへ発注をして作ることがあった。
ベンダーコントロールなんて言ったりするが、発注でのシステム開発の業務では下記のようなことをしてきた。
 要求仕様の検討 見積もり依頼と価格交渉 発注、スケジュール調整 社内での業務調整 受入試験、検収  運用  仕事のほとんどは、社内外の人との調整（コミュニケーション）だ。
エンジニアとしては一見つまらなそうな仕事にみえるかもしれない。
しかし、この仕事から様々なコミュニケーションを学び、それはいろんな場面で役に立っている。
例えばだが、以下の様なコミュニケーションがあったりした。
 要求を他者にしっかり、わかりやすく伝える 仕様や価格についての折衝をする システムの利用部門との業務調整をする 作業の手順について精査し指摘する ミスなど良くないことが起きた際には、今後の対策はどうするか相手側に考えさせるよう導く 場合によっては厳しく叱ることもする（感情的に怒るわけではない）  特に価格の折衝などは、SIerや購買部と激しく激突することもあり今でもとても印象に残っている。
こういった業務はビジネスマンとしてとても大事なことを学んだと思うし、内製での開発業務でもとても活きてきている。
外注はいいけど・・・ 社内リソースが少なくても同時並行でいろんなシステムの開発ができるし外注はいい。
一方で外注開発について、もどかしさや非効率さなどもたくさん経験してきた。
まず、なにをやるにもお金と時間がかかることだ。
一度納品されてしまったものについて、なんらかの改修をしたい場合、
その改修規模を問わず、見積もり→発注→開発・改修→納品のプロセスを通さなければならない。
if文を１行追加するだけだろ…って思うようなものでも数百万で数週間かかることだってあった。
そして、プロセスの効率化が難しいことだ。
ベンダーが開発したシステムをリリースするには、発注側の会社に度々きてリリース作業を行う。
勝手に発注側のシステムをアップデートすることはありえないので、必ずリリース作業には社員が立ち会わなければいけない。
そのとき、リリース作業が自動化されていないことも多く（発注時の要求によってもちろん異なる）、
何時間もかけて数十台のサーバにデプロイしたりしなければいけなかったりするので大変だ。
これは当たり前だがとても効率が悪いし時間の無駄だ。
だがこれを改善しようと思うとまたお金がかかるわけである。
扱っているシステムが、業務システムなのでアップデートの頻度がおおくないこともあるので、
はじめからデプロイの自動化などを要件にいれることは少ないのである。
これらはSIの開発をディスっているわけではない。（要求も悪いのはわかる。）
これは仕方ないこととして、そのメリット・デメリットをきちんと理解した上で選択、要求をしなれけばいけないということだ。
2. 内製開発の仕事 外注開発とは別にシステムの内製での開発業務も多くおこなってきた。
社内的には外注開発から内製開発に徐々に切り替えの最中であった。
ちなみに開発言語はRuby（RailsやPadrino）やPHP（FuelPHP）なんか使っていた。
業務システムの他にもメールサーバやリバースプロキシサーバなど基盤システムも構築してきた。
2015年の振り返りブログに雑だが少し書いていた。
2015年振り返り - Goldstine研究所 開発組織の改善活動 また、開発組織を改善するための活動をおおく行ってきた。
どこの組織でもある問題だと思うが、うちもまた「属人化」「秘伝のタレ」などといった類の悩みをたくさん抱えていた。
うちはソフトウェア企業ではないし、システムを外注で作る部署も多い。
そのため、新卒や異動してくる人などがソフトウェアエンジニア思考の人ばかりではない。というかむしろ少数派。
だからこそ、よりいっそう「属人化」「秘伝のタレ」が弊害となる。
わかりやすいところでいうと下記のようなことをやったりして開発組織の改善をしてきた。</description>
    </item>
    
    <item>
      <title>【めも】httpヘッダー、x-forwarded-forとか任意のヘッダーとか</title>
      <link>https://blog.mosuke.tech/entry/2016/07/26/215939/</link>
      <pubDate>Tue, 26 Jul 2016 21:59:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/07/26/215939/</guid>
      <description>ただのめも。
もともとApache+PHPで動作していたシステムに、リバースプロキシ（Nginx）を前段に挟むことになった。（理由はここではどうでもいいので書かない）
つまり、Nginx-&amp;gt;Apache-&amp;gt;PHPという構成になった。
よくあることだが、Apacheからみるとすべてリバースプロキシから通信がきているので、 接続元のIPアドレスがすべてリバースプロキシのものになる。
HTTPヘッダーに接続元のIPアドレスを追加しアプリ側（PHP）で受け取ろうとしたときのめも。
リバースプロキシ側でHTTPヘッダー追加 まず、そもそもデフォルトのNginxの設定では接続元のIPアドレスをHTTPヘッダーに含まれない。
ググればすぐに設定方法自体はでてくる。
X-Forwarded-Forというヘッダー名にNginxでもっている変数$proxy_add_x_forwarded_forをつっこむ。
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  設定は簡単なんだけど、そもそもX-Forwarded-Forなんていうヘッダーあったっけ。。。？
Wikipediaでみる。
X-Forwarded-For (XFF) とは、HTTPヘッダフィールドの一つ。HTTPプロキシサーバまたは負荷分散装置（ロードバランサ）を経由してウェブサーバに接続するクライアントの送信元IPアドレスを特定する際のデファクトスタンダードである。 （略）RFCの標準的なヘッダフィールドではないが、IETFのネットワーク作業部会 (Network Working Group) は2011年10月より同種のHTTPヘッダForwardedの標準化作業を開始した[1]。
 なるほど、RFCの標準ではないけど、一般的なものなんですね。
 phpでX-Forwarded-Forを受け取る というわけで、おりゃ！
echo $_SERVER[&#39;X-Forwarded-For&#39;];  エラー...
※普段PHP使ってないのがバレますね。
サーバ変数とりあえず、全部はきだす。
&amp;lt;?php var_dump($_SERVER); # array(x) { [&amp;quot;HTTP_X_FORWARDED_FOR&amp;quot;] =&amp;gt; string(12) &amp;quot;192.168.33.1&amp;quot; ...... }  HTTP先頭についてて、大文字になってて、ハイフンがアンスコに変わっている。
あたりまえだけどこれはPHPの仕様でいいんだよな...？
&amp;lt;?php var_dump(getallheaders()); # array(x) { [&amp;quot;X-Forwarded-For&amp;quot;] =&amp;gt; string(12) &amp;quot;192.168.33.1&amp;quot; ...... }  サーバ変数にいれるときに、変わるんだわ。
念のためtcpdumpで軽く確認してみる $ sudo yum install tcpdump $ tcpdump dst port 80 -X # ながいんで適当に端折りました 11:04:01.</description>
    </item>
    
    <item>
      <title>Vim::Factory、LTではなす</title>
      <link>https://blog.mosuke.tech/entry/2016/07/03/224531/</link>
      <pubDate>Sun, 03 Jul 2016 22:45:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/07/03/224531/</guid>
      <description>7月6日の会社のエンジニアイベントでLTするやつ、先にあげておく。
自分の中でのネタとしては古いけど、話すのはなんだかんだ初。</description>
    </item>
    
    <item>
      <title>IkaLog環境整えた。画面が突然映らなくなる事象とかについて</title>
      <link>https://blog.mosuke.tech/entry/2016/06/25/113009/</link>
      <pubDate>Sat, 25 Jun 2016 11:30:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/06/25/113009/</guid>
      <description>昔まで、人の家でスプラトゥーンをやったりたまに借りたりして楽しんでいたが、
ついにというか今更というか自宅用に買ってしまった。
ついでにという感じで、お金を注ぎ込んで、IkaLogを楽しめる環境も作った。
IkaLogあるととても楽しい。
IkaLog環境はほぼ下記ブログを参考にしたので、詳しいことはかかないが、
全体図やハマったポイントなどを中心にまとめておく。
雑記：Mac + IkaLog + stat.inkで戦績管理 - 新人SEの学習記録
完成後写真 
図にしてわかりやすくすると 
突然画面が映らなくなることが起きた！！ ゲームを楽しんでいた時突然、ディスプレーに画面が映らなくなることが度々あった。
ケーブルを抜き差ししても直らない。
ただ時間が経つと映るようになる・・・
原因が最初わからなかったのだが、
どうやらHDMIスプリッターの電源供給が追いつかなくなった時になっていた。
HDMIスプリッターはHDMIからある程度給電することができるので、はじめはそのまま利用していた。
だが、IkaLogを回し始めるとどうやら給電が追いつかなくなるようであった。
説明書にも下記のように書いてあって、「あっ」って感じだった
入力機器側の電力不足により正常に表示できない場合に使用します。
 USB経由で別途電源供給をするようになってから事象が発生しなくなった！
※画面が映らなくなってガチマッチ何度負けたことか・・・</description>
    </item>
    
    <item>
      <title>Nginxの仕組みについて入門</title>
      <link>https://blog.mosuke.tech/entry/2016/06/04/180122/</link>
      <pubDate>Sat, 04 Jun 2016 18:01:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/06/04/180122/</guid>
      <description>普段Nginxを使ってはいるものの、その仕組やなぜNignxを使うべきなのかというところがあまりわかっていなかったので、 改めてNginxを入門しその仕組などについて調べてみた。
勉強不足もあって、間違ってることもあるかもしれないがその際は教えて下さい。
1. C10K問題 まず、Nginxを理解する上でC10K問題について知る必要がある。
C10K問題とは下記の問題のことだ。
ハードウェアの性能上は問題がなくても、クライアント数があまりにも多くなるとサーバがパンクする問題のこと。 C は「Client（クライアント）」の頭文字、10K は「1 万台」を意味する。「クライアント 1 万台問題」ともいわれる。
（C10K 問題とは - はてなキーワード より引用）
 2. 従来のWebサーバのアーキテクチャ  prefork Apacheのデフォルトのアーキテクチャなどで採用されている。
特徴としては、１リクエストに対して１プロセスが処理する。
すなわち同時接続が 1000であれば 1000個のプロセスが必要となる。

worker リクエストはスレッドが処理する。
スレッドは１プロセスのなかで複数立ち上げることができる。
プロセス数は少なくて済むが、同時接続が1000であれば1000個のスレッドが必要となる。
Apacheで指定可能なアーキテクチャの１つ。

いずれにしても、1000の同時接続があれば、1000のプロセスやスレッドが必要ということだ。
プロセス/スレッド数が多くなってくると「コンテキストスイッチ」が多く発生し、処理が遅くなってしまう。
 コンテキストスイッチとは コンテキストスイッチとは、コンピュータの処理装置（CPU）が現在実行している処理の流れ（プロセス、スレッド）を一時停止し、別のものに切り替えて実行を再開すること。
（コンテキストスイッチとは｜コンテキストスイッチング｜context switch - 意味/定義 ： IT用語辞典 より引用）
 3. Nginxのアーキテクチャ  NginxがC10K 問題を解決するために開発されたともいわれている。
上記のような課題を解決するようなアーキテクチャを採用している。

ワーカプロセスがリクエストを処理する。
前述のpreforkやworkerと決定的に違うところは、１つのワーカプロセスが複数のリクエストを処理するということだ。
また、マスタープロセスはワーカプロセスの立ち上げや、制御、管理などが主な仕事。
Nginxを終了あるいは再起動、設定ファイルを再読み込みして変更を反映するなど。
下記のような仕組みがNginxの高速化（C10K問題対応）を可能としている。
シングルスレッド 接続ごとにプロセスやスレッドを立ち上げていては、C10K問題に対応できない。
そこで、Nginxは１つのスレッドで処理を行うようにしている。
それにより、コンテキストスイッチと呼ばれるCPUの切り替え処理が発生しない。
正確に言うと、完全に１スレッドで処理するわけではなく図にあるようにワーカプロセス自体はマルチプロセス化できる。
イベント駆動 通常のプログラムは上から書かれた順に実行されますよね。
イベ ント駆動で動作するプログラムは何かしらのイベントが発生するまで待機し、発生したイベントの種類に応じて実行される。</description>
    </item>
    
    <item>
      <title>今度こそ入門するtmux</title>
      <link>https://blog.mosuke.tech/entry/2016/04/15/002004/</link>
      <pubDate>Fri, 15 Apr 2016 00:20:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/04/15/002004/</guid>
      <description>tmuxの入門は何度目だろうか…
SoftwareDesignの2015年7月号を見ながら、何度目かの入門をしたのでメモする。
ブログに書いたので、これで運用にのりそうだ。
tmuxってなに？ 公式ページ(http://tmux.github.io/)から引用すると。
tmux is a terminal multiplexer. What is a terminal multiplexer? It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more.
（訳）tmuxはターミナルマルチプレクサです。ターミナルマルチプレクサは複数のプログラムを容易に1つのターミナル上で切り替えられるようにします。またそれらのプログラムをバックグラウンドで動かしながらデタッチしたり、別のターミナルにアタッチすることができます。さらにいろいろなことができます。
 tmuxを使ってみる インストール 今回Macの環境で行っています。
今日時点ではバージョン2.2まででていますが、brewでは2.1がインストールされました。
$ brew install tmux $ tmux -V tmux 2.1  起動 $ tmuxと入力すると、tmuxが起動し$ exitで抜けることができます。
これから説明していきますが、tmuxの機能を利用するときプレフィックスキーを入力する必要があります。
デフォルトではプレフィックスキーはCtrl-bになっています。
ウィンドウの作成、切り替え １つのtmuxの中にウィンドウ（タブ機能と考えてください）を作って切り替えたりします。</description>
    </item>
    
    <item>
      <title>HerokuをRailsアプリのステージング環境として使う</title>
      <link>https://blog.mosuke.tech/entry/2016/03/28/181636/</link>
      <pubDate>Mon, 28 Mar 2016 18:16:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/03/28/181636/</guid>
      <description>趣味で作っているアプリ(Rails)があるのだが、はじめHerokuで運用しようと検討していたが、 データ量が多いためすぐにHobbyプランでは対応できなくなってしまった。
仕方ないので、別のアプリで持っているVPSをProduction環境とすることにしたのだが、
せっかくなのでherokuもうまく使いたいなーと思ってステージング環境として使うことにした。
そのときにやったことをメモする。
Staging環境の設定を作る Railsではデフォルトではdevelopment, test, productionの環境を持っている。
そこに今回、stagingという環境を追加した。
そして、herokuではデフォルトではproductionを利用するようになっているのでstagingに切り替えるだけ。
Rails側はstaging環境追加。
$ vim config/database.yml # 下記を追加した staging: &amp;lt;&amp;lt;: *default adapter: postgresql encoding: unicode database: pool: 5 username: password: $ vim config/enviroments/staging.rb # 基本的にはproduction.rbをコピーし、必要に応じて設定を変更 $ vim config/secrets.yml # 必要に応じてstagingを追加  heroku側はステージングへの切り替え。
$ heroku config --app app-name # デフォではproductionになってる RAILS_ENV: production $ heroku config:set RAILS_ENV=staging --app app-name $ heroku config --app app-name RAILS_ENV: staging  Basic認証 ステージング環境なので、外部から簡単にアクセス出来ないようにBasic認証をかけた。
いくつかやり方があると思うが、app/controllers/application_controller.rbに設定を追加した。
ユーザ名とパスワードをベタ書きだとGithubに上げてる場合は丸見えになってしまうので環境変数でやりましょう。
http_basic_authenticate_with :name =&amp;gt; ENV[&#39;BASIC_AUTH_USERNAME&#39;], :password =&amp;gt; ENV[&#39;BASIC_AUTH_PASSWORD&#39;] if Rails.</description>
    </item>
    
    <item>
      <title>Github Pagesを今更作った話と、独自ドメイン適応時の通信のこと</title>
      <link>https://blog.mosuke.tech/entry/2016/03/19/232437/</link>
      <pubDate>Sat, 19 Mar 2016 23:24:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/03/19/232437/</guid>
      <description>今更ながらgithubページでプロフィールサイトを作った。
(もう少しデザインブラッシュアップしたい…)
mosuke tech
また、独自ドメイン（カスタムドメイン）の設定やその仕組みをおっている時に、
独自ドメイン適応時の通信について面白いことがわかったのでかく。
求めていたもの  ブログとか作ったプロダクトをまとめたかった 極力シンプルでメンテしやすいものがよかった でもレスポンシブなデザインがよかった  どのようにつくったか 上の条件を満たすために以下の２パターンのどっちで作ろうか迷った。
 Jekyllなどを使いテンプレートを使って作る  CSSフレームワークのみ利用し、あとは自分で作る  １ページだけのシンプルなプロフィールサイトがよかったので、
Jekyllとか複雑なものは利用したくないと考えた。
また、CSSフレームワークだが、いつもよくTwitterBootstrapを使っているので、
それ以外のものでやってみようと考えた。
その結果、行き着いたのがSkeletonだった。
Skeletonは&#34;A dead simple, responsive boilerplate.&#34;をうたっているものでよかった。
カスタムドメインの設定 デフォルトだとmosuke5.github.ioのURLが利用できる。
しかし、この前mosuke.techといういい感じのドメインを安く手に入れてたので、カスタムドメインの設定を行うことにした。
カスタムドメインの設定方法は以下のみだ。
  レポジトリにCNAMEファイルを作成する $ echo mosuke.tech &amp;gt; CNAME   DNSの設定：Aレコードに192.30.252.153と192.30.252.154を追加  (本家ドキュメント)
Setting up an apex domain - User Documentation
カスタムドメイン設定時の通信について カスタムドメインがどのような仕組みで実現されているのか気になって、
いろいろと調べている時にあることに気づいた。
Aレコードに登録したIPアドレスを逆引きで調べると、pages.github.comが出てくるが、
pages.github.comをdigすると違う結果が返ってくる。
$ dig -x 192.30.252.153 ;; ANSWER SECTION: 153.252.30.192.in-addr.arpa. 3600 IN PTR pages.</description>
    </item>
    
    <item>
      <title>DBのViewの使いどころの検討</title>
      <link>https://blog.mosuke.tech/entry/2016/03/16/175431/</link>
      <pubDate>Wed, 16 Mar 2016 17:54:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/03/16/175431/</guid>
      <description>ある実装についてどのように実装するか悩んだ。
その悩んだ過程や実装案をメモする。似たようなケースの実装案として参考になればと思う。
状況 ある申請に対して、検査Aと検査Bを行い、その検査状態・検査日時を管理・閲覧するシステムがあるとする。 申請のテーブルは下記とする。
 id: int name: varchar(20) # どうでもいいので無視していい check_a: datetime # 検査すると実施した日時がはいる check_b: datetime # 検査すると実施した日時がはいる  UIとして下記のように表示したいと考えている。
   番号 状態 名前 検査A 検査B     1 検査完了 xxxxxx 2016/03/01 10:00  2016/03/01 12:00   2 検査未完了 xxxxxx -  -    3 検査途中 xxxxxx 2016/03/01 13:00  -    4 検査途中 xxxxxx -  2016/03/01 15:00     ※SQLアンチパターンだろ！？ そもそもSQLアンチパターンの「マルチカラムアトリビュート」じゃないの？と思うかもしれない。</description>
    </item>
    
    <item>
      <title>【錦織圭も分析】ATP TennisのデータスクレイパーGem作った</title>
      <link>https://blog.mosuke.tech/entry/2016/03/06/140531/</link>
      <pubDate>Sun, 06 Mar 2016 14:05:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/03/06/140531/</guid>
      <description>背景
このブログは基本的に技術ブログとしてやっているので、
テニスの話題ははじめてだが、テニスがすごく好きだ。 特に、プロの試合の観戦はとても好きだ。
2005年からずーっと見てて、欠かさずすべての試合結果はチェックしている。
数年前から、テニス選手をある指標から分析したいなと思っていた。 例えば、
 ランキングは高くないけど、爆発するとトップ選手に勝つ力を持っているかどうか 自分より格下の選手に負けることが少ないかどうか 小さい大会ではあまり勝てないけど、大舞台で勝てる選手かどうか  これから伸びそうな選手かどうかなどをデータ的にみたかった。
ATPの公式サイトにもいくつか統計情報が載っているが、自分が大事と思う指標で分析したいと思っていた。
まずは、データを取得しなければいけないので、それでスクレイピングのライブラリを作るにいたった。
AtpScraper AtpScraperは男子のプロテニスの公式サイトである、ATPのサイトから情報をスクレイピングしてくれるRubyライブラリだ。
github.com
現時点では、ぼくが今欲している機能しか実装していないが、下記ができる。
 シングルスのランキングの取得 プレイヤーの対戦レコードの取得  一例だが、どんなふうに利用できるかのせる。
シングルスのランキング取得 デフォルトだとトップ100のランキングを取得する。
pry(main)&amp;gt; AtpScraper::Get.singles_ranking =&amp;gt; [{:ranking=&amp;gt;&amp;quot;1&amp;quot;, :player_name=&amp;gt;&amp;quot;Novak Djokovic&amp;quot;, :player_url_name=&amp;gt;&amp;quot;novak-djokovic&amp;quot;, :player_id=&amp;gt;&amp;quot;d643&amp;quot;, :points=&amp;gt;&amp;quot;16580&amp;quot;}, {:ranking=&amp;gt;&amp;quot;2&amp;quot;, :player_name=&amp;gt;&amp;quot;Andy Murray&amp;quot;, :player_url_name=&amp;gt;&amp;quot;andy-murray&amp;quot;, :player_id=&amp;gt;&amp;quot;mc10&amp;quot;, :points=&amp;gt;&amp;quot;8765&amp;quot;}, {:ranking=&amp;gt;&amp;quot;3&amp;quot;, :player_name=&amp;gt;&amp;quot;Roger Federer&amp;quot;, :player_url_name=&amp;gt;&amp;quot;roger-federer&amp;quot;, :player_id=&amp;gt;&amp;quot;f324&amp;quot;, :points=&amp;gt;&amp;quot;8295&amp;quot;}, (略)  下記のようにすれば、50位から60位のランキングを取得できる。
（※引数の指定の仕方がアレなのは突っ込まないこと）
pry(main)&amp;gt; AtpScraper::Get.singles_ranking(&amp;quot;50-60&amp;quot;) =&amp;gt; [{:ranking=&amp;gt;&amp;quot;50&amp;quot;, :player_name=&amp;gt;&amp;quot;Lukas Rosol&amp;quot;, :player_url_name=&amp;gt;&amp;quot;lukas-rosol&amp;quot;, :player_id=&amp;gt;&amp;quot;r685&amp;quot;, :points=&amp;gt;&amp;quot;897&amp;quot;}, {:ranking=&amp;gt;&amp;quot;51&amp;quot;, :player_name=&amp;gt;&amp;quot;Federico Delbonis&amp;quot;, :player_url_name=&amp;gt;&amp;quot;federico-delbonis&amp;quot;, :player_id=&amp;gt;&amp;quot;d874&amp;quot;, :points=&amp;gt;&amp;quot;895&amp;quot;}, (略)   錦織圭の対戦レコード取得 錦織圭の2016年の対戦レコードを見たいと思えば下記のように取得できる。</description>
    </item>
    
    <item>
      <title>社内マリカー大会やりました！運営の工夫どころとかまとめ</title>
      <link>https://blog.mosuke.tech/entry/2016/02/07/210300/</link>
      <pubDate>Sun, 07 Feb 2016 21:03:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/02/07/210300/</guid>
      <description>弊社では、年に一度、社内のコミュニケーション促進で、いろんな部署が集まって行う懇親会がある。
そこでは、恒例行事として何かしらのゲームを行っている。
そのゲームにて今年マリカー大会を行ったので、その報告と工夫した点などまとめておく。
 マリオカートを選んだ理由 パーティとか懇親会のゲームイベントというと、
ビンゴ大会だったりクイズ大会、ジェスチャーゲームだったり行うのが一般的かと思う。
ですが、今回そういう場でマリオカート大会を選ぶに至ったのには下記のような理由があった。
 準備が楽なものがよかった！ 順位が決められるものが良かった（景品の都合上） 楽しさに進行役の力量が影響しないものがよかった…  まず、はじめはクイズ大会などを行おうかと検討していましたが、
そのクイズの問題を考えるのが結構たいへんであることに気づき、準備が楽なものがいいなと思った。
そして、運営的な理由だが、ゲームの結果を順位を簡単に決められる必要があった。
最後に、なんといっても自分が進行役だったので、
自分の笑いを取る力や進行技術で楽しさが左右されたらこまるなーとおもっていた。
これらを満たすことができると思ったのが「マリカー」だった！
環境 参加者 ８つのチームから合計200人程度参加。
年齢層も結構バラバラ。若手からお偉いさんまでいる。
映像 WiiUの画像は、HDMIを使ってプロジェクターで大型スクリーンに投影した。
ルール 200人全員にマリオカートに参加してもらうことは難しかったので、
各チームで６人のゲーム参加者を事前に選んで頂いて、チームを代表として参加してもらうこととした。
（マリカー大会をやることは事前には言いませんでした。）
WiiUでは４人対戦までしかできないので、下記のような形式で対戦を進めた。
 8チームを4チーム×２分けて予選 下位２チームが下位決定戦 上位２チームが決勝戦  またなるべく多くの人がゲームに参加して欲しかったので、
特別ルールとして、コースを１周したらチームのほかの人に交代するというリレー形式とした。
準備したもの   WiiU本体(ゲームパッド含む)  マリオカート8のソフト  Wiiリモコン 4つ www.amazon.co.jp   運営上の工夫 運営上幾つかの工夫を行ったので紹介する。
キャラクターについて 利用するキャラクターや乗り物は、予めこちらでチームごとにランダムで割り振った。
そうすることで、当日にキャラを選ぶ時間を短縮できるし、マリカーの知識の差がなくなる。
キャラクターは運ということにした。
コントローラについて ４人対戦だと画面が４つに分割される。
自分がどの画面を操作すべきかわからなくなるので、画面位置がわかるようにコントローラにシールを貼った。
この対応は必須です。

アイテムや操作など CPUなしで４人対戦で行った。 ４人対戦で普通のアイテム設定だと、「コイン」とか「バナナ」とか良いアイテムが出づらくつまらない。
アイテムの設定は「ダイナミック」にすることで、４人でも強力アイテムがでてバトルが白熱する。
カートの操作方法（曲がり方）は十字キーではなくハンドル操作とした。
普段ゲームに慣れている人でも、ハンドル操作だと不慣れなことも多くみんなうまい具合に下手になって白熱した。
初心者への対応 アイテムの細かい使い方などいちいち説明できないので、
初心者へは「アクセル」と「曲がること」のみ教えた。</description>
    </item>
    
    <item>
      <title>Vagrant×Ansible環境の３つのスタイルとそのメリット・デメリットについて</title>
      <link>https://blog.mosuke.tech/entry/2016/01/25/222150/</link>
      <pubDate>Mon, 25 Jan 2016 22:21:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/01/25/222150/</guid>
      <description>Vagrant×Ansibleで開発環境を作っているみなさんは、 どんなふうにそれを実現していますか？
きっといくつかのやり方、考え方があると思います。
例えば、ご自身のPCにAnsibleをインストールしてVagrantの仮想環境にプロビジョニングしているとか。
Vagrantで立てた仮想環境にAnsibleを入れて実行するとか。
本ブログでは下記３つのVagrant×Ansibleのやり方に注目し、
そのメリット・デメリットについて自分なりにまとめます。
 ホストにAnsibleをインストールして利用する ゲストにAnsibleをインストールして利用する Ansible実行用のゲストを作って利用する  1. ホストにAnsibleをインストールして利用する 概要 1番よくあるやり方だと思う。
ご自身のPCにAnsibleを入れてVagrantで立ち上げたゲストにプロビジョニングを行う。

メリット なんといっても直感的でシンプル。
3.との比較になるが、Ansibleを実行する環境を別途用意する必要がないのでホストのリソースにも優しい。
また、2.との比較でゲストに無駄なものが入らない点でよい。
デメリット ただ、そもそもwimdowsユーザはホストにAnsibleをインストールすることはできない。
つまり、複数人での開発をしていて、人によって端末が異なる場合には向いていない。
個人の端末の設定などにも大きく依存するため、チーム開発向きでないといえる。
2. ゲストにAnsibleをインストールして利用する 概要 Vagrantで立ち上げたゲストの中にAnsibleをインストールし、自身へプロビジョニングするやりかた。

この方式はshin1x1さんもおすすめしている。
Vagrant + Ansible で開発環境を作るなら ansible_local プロビジョナがいい！ - Shin x Hatena Blog メリット （詳しくは上のブログを読むといいと思う。）
1.のデメリットで述べた、端末への依存度をなくすことができる。
vagrantの新機能であるansible_localも利用できるのでプロビジョニングが楽だ。
3.と比べてAnsible実行環境を用意しなくて済む。
デメリット メリットだけみると1.の問題点を解決していて最高のようにみえる。
しかし、ゲストに本来インストールされるべきものでないものがはいる点は忘れてはいけない。
Ansibleを使ってプロダクション環境にデプロイするユーザにとっては大きな問題だと思う。
開発環境とプロダクション環境での差分が広がってしまう。
また、Ansibleと並行してserverspecを使ってる人も多いと思うが、
そうなると今度はゲスト側にRubyもいれるのか？など様々な疑問が湧いてくる。
3. Ansible実行用のゲストを作って利用する 概要 Ansible実行用のゲストをVagrantで立ち上げて、開発用のゲストへプロビジョニングにする。 
メリット 2.のデメリットで述べた、ゲストへの不要なもののインストールを防ぐことが可能。
例えばserverspecでRubyが必要な場合もAnsible実行用のゲストに入れればいい。
必要なものをインストールしたAnsible実行用のイメージファイルをチーム内で共有すれば端末依存もセットアップの手間も省ける。
デメリット なんといっても、ゲストを二つは立ちあげる必要があること。
これは少し面倒だ。
まとめ</description>
    </item>
    
  </channel>
</rss>