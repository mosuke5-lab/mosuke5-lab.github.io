<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vagrant on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/vagrant/</link>
    <description>Recent content in Vagrant on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 25 Jan 2016 22:21:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/vagrant/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vagrant×Ansible環境の３つのスタイルとそのメリット・デメリットについて</title>
      <link>https://blog.mosuke.tech/entry/2016/01/25/222150/</link>
      <pubDate>Mon, 25 Jan 2016 22:21:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/01/25/222150/</guid>
      <description>Vagrant×Ansibleで開発環境を作っているみなさんは、 どんなふうにそれを実現していますか？
きっといくつかのやり方、考え方があると思います。
例えば、ご自身のPCにAnsibleをインストールしてVagrantの仮想環境にプロビジョニングしているとか。
Vagrantで立てた仮想環境にAnsibleを入れて実行するとか。
本ブログでは下記３つのVagrant×Ansibleのやり方に注目し、
そのメリット・デメリットについて自分なりにまとめます。
 ホストにAnsibleをインストールして利用する ゲストにAnsibleをインストールして利用する Ansible実行用のゲストを作って利用する  1. ホストにAnsibleをインストールして利用する 概要 1番よくあるやり方だと思う。
ご自身のPCにAnsibleを入れてVagrantで立ち上げたゲストにプロビジョニングを行う。

メリット なんといっても直感的でシンプル。
3.との比較になるが、Ansibleを実行する環境を別途用意する必要がないのでホストのリソースにも優しい。
また、2.との比較でゲストに無駄なものが入らない点でよい。
デメリット ただ、そもそもwimdowsユーザはホストにAnsibleをインストールすることはできない。
つまり、複数人での開発をしていて、人によって端末が異なる場合には向いていない。
個人の端末の設定などにも大きく依存するため、チーム開発向きでないといえる。
2. ゲストにAnsibleをインストールして利用する 概要 Vagrantで立ち上げたゲストの中にAnsibleをインストールし、自身へプロビジョニングするやりかた。

この方式はshin1x1さんもおすすめしている。
Vagrant + Ansible で開発環境を作るなら ansible_local プロビジョナがいい！ - Shin x Hatena Blog メリット （詳しくは上のブログを読むといいと思う。）
1.のデメリットで述べた、端末への依存度をなくすことができる。
vagrantの新機能であるansible_localも利用できるのでプロビジョニングが楽だ。
3.と比べてAnsible実行環境を用意しなくて済む。
デメリット メリットだけみると1.の問題点を解決していて最高のようにみえる。
しかし、ゲストに本来インストールされるべきものでないものがはいる点は忘れてはいけない。
Ansibleを使ってプロダクション環境にデプロイするユーザにとっては大きな問題だと思う。
開発環境とプロダクション環境での差分が広がってしまう。
また、Ansibleと並行してserverspecを使ってる人も多いと思うが、
そうなると今度はゲスト側にRubyもいれるのか？など様々な疑問が湧いてくる。
3. Ansible実行用のゲストを作って利用する 概要 Ansible実行用のゲストをVagrantで立ち上げて、開発用のゲストへプロビジョニングにする。 
メリット 2.のデメリットで述べた、ゲストへの不要なもののインストールを防ぐことが可能。
例えばserverspecでRubyが必要な場合もAnsible実行用のゲストに入れればいい。
必要なものをインストールしたAnsible実行用のイメージファイルをチーム内で共有すれば端末依存もセットアップの手間も省ける。
デメリット なんといっても、ゲストを二つは立ちあげる必要があること。
これは少し面倒だ。
まとめ</description>
    </item>
    
    <item>
      <title>【VPS1台でインフラ勉強】多段SSH設定（おまけ）</title>
      <link>https://blog.mosuke.tech/entry/2014/11/09/172745/</link>
      <pubDate>Sun, 09 Nov 2014 17:27:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2014/11/09/172745/</guid>
      <description>VPS1台でインフラ勉強の会で、VPSのホストサーバ上に仮想でさらにいつくかのサーバを立てたが、
仮想のサーバにアクセスするには、ホストサーバにアクセスしてから更にSSHをしなければならない。
これが面倒だったので多段SSHの設定をして、一発でSSH接続できるようにした。
以下の図で言うと、web10, web11(192.168.33.10&amp;frasl;11)に一発でSSHできるようにする。

クライアントPC側に以下の設定をした。
$ vim ~/.ssh/config host gateway HostName xxxxx.xxx User username Host web10 HostName 192.168.33.10 User vagrant ProxyCommand ssh -W %h:%p gateway Host web11 HostName 192.168.33.11 User vagrant ProxyCommand ssh -W %h:%p gateway ##これで以下で接続可能 $ ssh web10 $ ssh web11  簡単でした。</description>
    </item>
    
    <item>
      <title>【VPS1台でインフラ勉強】HAProxyでロードバランサーを構築</title>
      <link>https://blog.mosuke.tech/entry/2014/11/09/171436/</link>
      <pubDate>Sun, 09 Nov 2014 17:14:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2014/11/09/171436/</guid>
      <description>前回の【VPS1台でインフラ勉強】サーバ複数台構成、Nginxでリバースプロキシ構築に続き、同様の環境を用いて、ロードバランサ構築を行った。
ロードバランサの構築にはHAProxyを利用した。
1. 環境 前回同様で、さくらVPSの1GBのプラン1台のみ。
・メモリ：１GB
・CPU：仮想２コア
・HDD：100GB
・OS：CentOS7
・サーバ仮想化：Vagrant(Utuntu13)
・ロードバランサ：HAProxy - The Reliable, High Performance TCP/HTTP Load Balancer
 2. 構成図 
 3. ロードバランサの構築 ■ホストサーバ側の設定
#HAProxyインストール $ sudo yum install haproxy #設定はすごく簡単で以下のファイルのみ。実際に $ sudo vim /etc/haproxy/haproxy.cfg #--------------------------------------------------------------------- # Example configuration for a possible web application. See the # full configuration options online. # # http://haproxy.1wt.eu/download/1.4/doc/configuration.txt # #--------------------------------------------------------------------- #--------------------------------------------------------------------- # Global settings #--------------------------------------------------------------------- global log 127.0.0.1 local6 debug chroot /var/lib/haproxy pidfile /var/run/haproxy.</description>
    </item>
    
    <item>
      <title>【VPS1台でインフラ勉強】サーバ複数台構成、Nginxでリバースプロキシ構築</title>
      <link>https://blog.mosuke.tech/entry/2014/10/09/230555/</link>
      <pubDate>Thu, 09 Oct 2014 23:05:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2014/10/09/230555/</guid>
      <description>ロードバランシングとかクラスタリングとかリバースプロキシとか、
業務でも使っているし、概念とかはわかってるけど、自分で構築したことはやっぱりない。
自分で構築してみたいなーと思いつつもあたりまえだけど、サーバやネットワーク機器をそう簡単に調達もできない。
お金も当然ない。
というわけで、さくらVPSで仮想化つかってロードバランシングとかクラスタリングとかリバースプロキシとか勉強しましょうという「サーバインフラ会」を友人と始めた。
その第１回目のメモ。
第1回 サーバ複数台構成、Nginxでリバースプロキシ構築
第2回 HAProxyでロードバランサ構築


1. 使用した環境 まず今回利用した環境は以下のとおり。
さくらVPSの1GBのプラン。
・メモリ：１GB
・CPU：仮想２コア
・HDD：100GB
・OS：CentOS7
・仮想化：Vagrant
→dockerなどもはじめ検討していたが、コンテナ型仮想化だとサーバ感がでないので、よりサーバとして意識できるVagrantを採用
【参考】
料金・サービス仕様 | VPS（仮想専用サーバ）は「さくらのVPS」
 2. 完成イメージ・物理イメージ 

 
 3. VagrantでWebサーバ２台分を構築する Vagrantの詳細な利用方法は公式ドキュメントをみてもらうとするが、セットアップまでのひととおりの流れと注意点のみ記載する。
Vagrant Documentation
今回はWebサーバ２台を仮想で実現するので、それぞれweb1, web2とする。
それぞれのディレクトリを作成。
## web1, web2のディレクトリ作成 $ pwd /home/vagrant $ mkdir web1 $ mkdir web2 ## 仮想化で利用するOSイメージをダウンロード $ vagrant box add ubuntu1310 ¥ http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-13.10_chef-provisionerless.box ## web1サーバ構築 $ cd web1 $ vagrant init ubuntu1310 ## ほぼほぼデフォルトの設定だが以下２つだけは設定を行った。 $ vim Vagrantfile # (1)プライベートアドレスの割り当て。 config.</description>
    </item>
    
  </channel>
</rss>