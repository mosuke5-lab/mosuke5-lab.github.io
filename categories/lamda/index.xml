<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lamda on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/lamda/</link>
    <description>Recent content in Lamda on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 02 Oct 2016 21:24:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/lamda/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>三葉よ、サーバーレス、それもまた結び。</title>
      <link>https://blog.mosuke.tech/entry/2016/10/02/212420/</link>
      <pubDate>Sun, 02 Oct 2016 21:24:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/10/02/212420/</guid>
      <description>タイトルちょっとふざけました。 (が、半分本気。最後の方でわかる。)
ServerlessConf Tokyoに参加してきた。
今年8月からパブリッククラウドの事業に異動していて、
開発者の立場よりクラウド提供側の立場として参加してきたので、また面白かった。
せっかくなので、自分なりにサーバレスについてまとめる。
新しいことというよりは、自分の中での整理した感じ。
1. サーバレスってなんだっけ カンファレンスの中でもサーバレスの定義についてはいろいろな意見がでていた。
Martin Fowlerのブログではサーバレスの定義として下記２つが書いてある。
 BaaS (Backend as a Service) : ex) firebase FaaS (Function as a Service) : ex) AWS Lambda  martinfowler.com
ですが、ここでは焦点を絞って話すためにもFaaSということにしておく。
主にFaaSについて話したいのと、BaaSもいれてしまうとSaaSもサーバレスとかややこしいことになるので。
 AWS Lambda なんといってもサーバレスの概念を推し進めたのはAWS Lambdaでしょう。
説明はいまさら不要だと思うが、少しだけ。
コードを AWS Lambda にアップロードすると、サービスが AWS インフラストラクチャを使用してコードの実行を代行するコンピューティングサービスです。コードをアップロードして、Lambda 関数と呼ばれる関数を作成することで、AWS Lambda がコードを実行するサーバーのプロビジョニングおよび管理を行います。(https://aws.amazon.com/jp/lambda/details/)
 課金モデルは関数呼び出した回数、および実行に利用したコンピュートのスペックによって決まる。
また特徴的なことは、AWSの他のサービスで発生したイベントをトリガーに実行できること。
例えば、Amazon S3にファイルアップロードされたことをトリガーにLambdaを実行できるのだ。
サーバレスの特徴 サーバレス自体そしてサーバレスで実装することの特徴しては下記がある。
  クラウド上のイベントを契機に実行できる 実行環境は、immutableで時間が立つと消える 実行環境は独立していて、コードは基本的にstatelessである 上記のようにimmutableでstatelessな構造につくるからこそスケールしやすい  2. どんな用途で利用しているか  クラウド基盤のイベントをトリガーとして 個人的に一番強力だと思っている使い方。上で説明したとおりだが、クラウド上のプロダクトに対してのイベントをトリガーに処理を行うことができる。</description>
    </item>
    
  </channel>
</rss>