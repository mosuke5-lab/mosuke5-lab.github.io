<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wercker on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/wercker/</link>
    <description>Recent content in Wercker on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 12 Jun 2017 23:33:12 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/wercker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo、PageSpeed対策で自動で画像を圧縮する</title>
      <link>https://blog.mosuke.tech/entry/2017/06/12/hugo_optimize_image/</link>
      <pubDate>Mon, 12 Jun 2017 23:33:12 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/06/12/hugo_optimize_image/</guid>
      <description> はじめに 最近Hugoを使ったブログに移転した。
「はてなブログからHugoに移行。その際に行ったあれこれ。」
せっかくブログを運営するからにはSEOも少しがんばりたい。
PageSpeedで画像を最適化できるよっていわれたので、画像を圧縮させようと思った。
しかし、気がつくと忘れてしまったりするので、
Werckerを使って自動で最適化させることにした。
WerckerでのCI/CD環境 まず、Werckerを使ったCI/CD環境だが、こちらを参考にしてほしい。
「Werckerを使ってHugo+Github PagesのCI/CD環境を整備する」
画像圧縮処理 ブログの中で使う画像は、JPEGとPNGが混じっている。
そのため、両方に対応して画像を圧縮する必要があった。
画像の圧縮ツールはPageSpeedが推奨してきた、
optipngとjpegtranを利用することにした。
 OptiPNG: Advanced PNG Optimizer jpegtran  処理自体はいたってシンプル。
次のシェル(optimize_image.sh)を用意した。
#!/bin/sh find ./static/image/ -name &amp;quot;*.png&amp;quot; | xargs optipng -o5 find ./static/image/ -name &amp;quot;*.jpg&amp;quot; -type f -exec jpegtran -copy none -optimize -outfile {} {} \;  Werckerに組み込む wercker.ymlのbuildの段階で最適化を仕込めばおわり。
ただし、すべての画像ファイルをデプロイのたびに最適化すると時間がかかる。
定期的にローカルで圧縮してgitに更新しておいたほうがいいだろう。
あくまで、忘れてしまった時のためにCIでまかなってくれるというスタンスで利用している。
- script: name: optimize image size code: | sh ./scripts/optimize_image.sh  </description>
    </item>
    
    <item>
      <title>Werckerを使ってHugo&#43;Github PagesのCI/CD環境を整備する</title>
      <link>https://blog.mosuke.tech/entry/2017/06/04/hugo_deployment_with_wercker/</link>
      <pubDate>Sun, 04 Jun 2017 14:47:15 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/06/04/hugo_deployment_with_wercker/</guid>
      <description>以前、はてなブログからHugoを使ったサイトに移行したことを書いた。
こちら参照：はてなブログからHugoに移行。その際に行ったあれこれ。
今回、Hugoで記事を更新してからデプロイまでの流れをWerckerを使って自動化したので紹介する。
概要 今までは下記のフローでデプロイを行っていた。
一部シェルスクリプトにして自動化していたが、hugoファイルを管理するレポジトリとGithub Pages用の
２つのレポジトリへのコミットが必要で手間がかかっていた。
 hugoファイル側で記事更新、デザイン変更 更新のコミット、プッシュ hugoコマンドでビルド /public以下のファイルをgithub pages用のレポジトリへコピー github pages用レポジトリーへ移動してコミット、プッシュ CloudFlareのキャッシュ削除  このフローをWerckerを利用して下記のように変更した。
 hugoファイル側で記事更新、デザイン変更 更新のコミット、プッシュ Werckerでビルド Werckerでビルド結果をGithub pages用レポジトリへプッシュ WerckerでCloudFlareのキャッシュ削除やSlack通知  Werckerを使っていわゆるCI/CDのフローを組むことで、
hugo側のファイル・レポジトリ管理をするだけでよくなった。
werckerの設定 wercker.yml まず、wercker.ymlから記述する。
Werckerを利用するには自分のレポジトリにwercker.ymlを配置する必要があり、
このファイルに記述のとおりに自動化処理を行わせる。
本記事ではWerckerの細かい話は割愛するが、以下がwercker.ymlだ。
box: debian build: steps: - install-packages: packages: git - script: name: download theme code: | $(git clone https://github.com/dplesca/purehugo ./themes/purehugo) - arjen/hugo-build: version: &amp;quot;0.20&amp;quot; theme: purehugo flags: --buildDrafts=false after-steps: - slack-notifier: channel: $SLACK_CHANNEL url: $SLACK_URL username: wercker_bot deploy: steps: - install-packages: packages: git ssh-client curl - leipert/git-push: gh_oauth: $GIT_TOKEN repo: mosuke5-lab/mosuke5-lab.</description>
    </item>
    
  </channel>
</rss>