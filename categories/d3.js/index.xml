<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>D3.Js on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/d3.js/</link>
    <description>Recent content in D3.Js on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 15 Sep 2014 13:56:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/d3.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>D3.js、DBからのデータ連携方法の検討</title>
      <link>https://blog.mosuke.tech/entry/2014/09/15/135611/</link>
      <pubDate>Mon, 15 Sep 2014 13:56:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2014/09/15/135611/</guid>
      <description>最近D3.jsを使う機会があり、DBのデータを読み込ませる方法についていくつか検討した。
例えば以下の状況を考える。
【やりたいこと】
「DBに格納されているデータを使って、D3.jsで折れ線グラフを描く」
【DBの構造】
カラム名：型
date : datetime
value : int
※また、下記ではSinatra上で行っているが、他の言語でも同様のことがいえる。
(1) 簡単なAPIのようなものを利用する 先に結論から書くと、今まで次の(2)(3)のようなやりかたをやっていたのだけれど、
これが一番複雑にならずに良いと思ったということ。
Sinatra側で/csvにアクセスするとcsvファイルをダウンロードできるようにする。
#Sinatra側 get &#39;/csv&#39; do content_type &#39;application/csv&#39; attachment &#39;download.csv&#39; #DBからデータ取得(Activerecord利用) @data = Model.all() #出力するCSVデータの変数。csvヘッダーを先につけている。 @csv = &amp;quot;date,value\n&amp;quot; #DBのデータをCSVの形にして格納 @data.each do |d| @csv += d.date.to_s + &amp;quot;,&amp;quot; + d.value.to_s + &amp;quot;\n&amp;quot; end #csvtest.erbというビューに出力 erb :csvtest, :layout =&amp;gt; false end  csvtest.erb
```ruby ``` こうすることで&#34;http://*****/csv&#34;にアクセスするとcsvファイルとしてダウンロードできる状態になる。
条件指定をしてデータをダウンロードできるようにしたい場合はGETでパラメータ指定できるようにすれば良いと思う。
（SinatraでCSVファイルを生成するところのコードがナンセンスだと思っているので、もっといい方法があるはず…）
また、今回はcsvにしているがjsonなどの他の形式でも同様のことがいえる。
これをD3.js側で以下のように読み込ませる。
d3.csv(&amp;quot;/csv&amp;quot;, function(error, data) { (中略) }  d3.</description>
    </item>
    
  </channel>
</rss>