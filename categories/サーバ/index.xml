<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>サーバ on Goldstine研究所</title>
    <link>https://mosuke.tech/categories/%E3%82%B5%E3%83%BC%E3%83%90/</link>
    <description>Recent content in サーバ on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 02 Feb 2015 20:10:00 +0900</lastBuildDate>
    
	<atom:link href="https://mosuke.tech/categories/%E3%82%B5%E3%83%BC%E3%83%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansible、コマンド実行結果を&amp;quot;ok&amp;quot;にする（冪等性を保つ方法）</title>
      <link>https://mosuke.tech/entry/2015/02/02/201008/</link>
      <pubDate>Mon, 02 Feb 2015 20:10:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2015/02/02/201008/</guid>
      <description>Ansibleでソースコードインストールする際とか
すでにインストールされているかのチェックなどで、
シェルコマンドを実行してその結果で判断したい時がある。
ぼくがよくやる例では以下とか。
- name: check httpd installed command: which httpd ignore_errors: true  なんですが...
こうやってしまうと、仮に既にインストールされていて、正常なときでも&#34;changed&#34;と表示されてしまう。
これでは、本当にchangedなものなのか、わからなくなってくる。
これを解決するのにchaged_whenを使うといい。
- name: check httpd installed command: which httpd ignore_errors: true changed_when: false  こうするとコマンドが成功した際には&#34;ok&#34;が表示される。
これで、何も変化がないときにはokとskippingしかでないから、
誰がみても結果がわかりやすいですね！
秘伝のタレ回避！</description>
    </item>
    
    <item>
      <title>スーパーサーバってなに？ xinetdでサービスを常駐起動せずに利用する</title>
      <link>https://mosuke.tech/entry/2015/01/02/013658/</link>
      <pubDate>Fri, 02 Jan 2015 01:36:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2015/01/02/013658/</guid>
      <description>使用頻度の低いサービスのデーモンをメモリに常駐させておくのは効率が悪い。
そこでスーパーサーバという使用頻度の低いサービスの窓口のサービスのみ起動しておき、要求があったときだけ特定のサービスを起動させることが可能らしい。
ということで、そのスーパーサーバとやらを実際に触ってみた。
スーパーサーバというとinetdとxinetdがあるらしいが、
xinetdはinetdの拡張版で、アクセス制御などの機能を搭載しているとのこと。
今回はxinetdを設定してみる。
1. 事前準備 【環境】
Vagrantで構築したCentOS 6.5
(仮想環境のIPアドレスは192.168.33.10)
まずはスーパーサーバで管理するサービスを考えなければならない。
SSHとかhttpはどう考えてもスーパーサーバの管理するようなものではないだろうし…
FTPやtelnet、POP3なんかのサービスに利用されることが多いそう？（このへんよくわかない）
今回はFTPをスーパーサーバの管理対象とした。
※本来は複数のサービスを管理対象とするからこそ意味がある。
まずはxinetdとvsftpをインストール
$ sudo yum install xinetd vsftpd  
xinetdどうこうの前に、ftp接続がきちんとできるか確認するのでサービスを起動。
$ sudo service vsftpd start  
ローカルPCから接続できることを確認する。
$ ftp 192.168.33.10 Connected to 192.168.33.10. 220 (vsFTPd 2.2.2) Name (192.168.33.10:username):  2. xinetdの設定 xinetdの基本設定は/etc/xinetd.confにかかれており、
xinetdで管理する各サービスの設定は/etc/xinetd.d/配下に書く方式。
ftpの設定を以下の通りにした。
&#34;service&#34;のあとに書くサービス名称は/etc/servicesに定義されているものを記載する。
vsftpとか書いても動かないので注意。
$ sudo vim /etc/xinetd.d/ftp service ftp { disable = no socket_type = stream wait = no user = root server = /usr/sbin/vsftpd log_on_failure += USERID }  設定項目については以下参照。</description>
    </item>
    
    <item>
      <title>Ansible, sudoパスワード要求を忘れただけでめんどくなる</title>
      <link>https://mosuke.tech/entry/2014/11/28/001748/</link>
      <pubDate>Fri, 28 Nov 2014 00:17:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/28/001748/</guid>
      <description>AnsibleをVagrant上でずっと使ってて、Playbookも完成したし本番サーバへ&amp;hellip;
と思ったところである初歩的な罠にハマった。
本番環境へPalybook実行！！
$ ansible-playbook playbook.yml -i hosts  あれ、GATHERING FACTSで10分以上も待たされた&amp;hellip;
しかも、エラー出た&amp;hellip;
GATHERING FACTS failed to parse [ sudo via ansible, key= ..... ]  sudoできていない&amp;hellip;？
playbook内のsudo: yesを外して実行。
GATHERING FACTSは通過。
しかし、当たり前だがsudo で実行すべき部分で失敗&amp;hellip;
とても単純なことに気づいた&amp;hellip;
・Vagrant環境ではsudoのパスワードを要求されない
・本番環境はsudoのパスワードを要求されること
・sudoのパスワードを入力するようにしていなかったこと
というわけで-Kをつけて実行
$ ansible-playbook playbook.yml -i hosts -K  うまくいった&amp;hellip;
完全なる私のミスなんだが、ただ-Kオプションを忘れるだけで、一回の実行に10分ほども待たされるのは…。
しかもGATHERING FACTSで止まっているときはCtl+Cで中断も聞かなかった。
要注意ですね。。。
ちなみに、こんな方法で解決もできる。
sudoのパスワードを聞かれなくして対応。
# visudo user_name ALL=(ALL) NOPASSWD: ALL</description>
    </item>
    
    <item>
      <title>【VPS1台でインフラ勉強】多段SSH設定（おまけ）</title>
      <link>https://mosuke.tech/entry/2014/11/09/172745/</link>
      <pubDate>Sun, 09 Nov 2014 17:27:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/11/09/172745/</guid>
      <description>VPS1台でインフラ勉強の会で、VPSのホストサーバ上に仮想でさらにいつくかのサーバを立てたが、
仮想のサーバにアクセスするには、ホストサーバにアクセスしてから更にSSHをしなければならない。
これが面倒だったので多段SSHの設定をして、一発でSSH接続できるようにした。
以下の図で言うと、web10, web11(192.168.33.10&amp;frasl;11)に一発でSSHできるようにする。

クライアントPC側に以下の設定をした。
$ vim ~/.ssh/config host gateway HostName xxxxx.xxx User username Host web10 HostName 192.168.33.10 User vagrant ProxyCommand ssh -W %h:%p gateway Host web11 HostName 192.168.33.11 User vagrant ProxyCommand ssh -W %h:%p gateway ##これで以下で接続可能 $ ssh web10 $ ssh web11  簡単でした。</description>
    </item>
    
    <item>
      <title>【雑記】VPSとお別れしました…</title>
      <link>https://mosuke.tech/entry/2014/05/18/142838/</link>
      <pubDate>Sun, 18 May 2014 14:28:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2014/05/18/142838/</guid>
      <description>2012年07月18日から契約していたVPSサーバを本日解約した。
約２年間の契約していたわけだがちょっと振り返るといろいろあったなーと思う。
ぼくがまだ大学３年のとき、ソーシャルブックマークサービスをリリースしたのだが、
その時はまだエンジニア初心者で、VPSではなく共有サーバを利用していた。
そんなプロジェクトが終わり、次のサービス(Twitterの解析ツール)の開発で初めてVPS環境を与えられたのだが、
サーバ構築など右も左もわからなかったので、自分の勉強用環境としてVPSを契約。VPS環境で行ったこと&amp;gt;
プロダクトとしては次の３つくらい作った
・Amazonの最安値段通知サービス
自分が欲しい物について希望価格を登録しておくと、Amazonの中古価格が希望価格を下回った時に通知してくれるサービス。
個人的には結構好きだったのだが、運用がめんどくさくなって閉鎖。
・うみなう ーTwitter上の「海なう」画像を眺めようー
夏場になるとTwitterで「海なう」と水着画像を付けて投稿する人が多い。
海なうのキーワードで出てきた画像をただただ眺めるだけのサービス(笑)
・キニナル ーきになるあの二人のツイートをー
Twitter上で気になる二人のツイート時系列で並べて監視するサービス。
公開はしていなかったけどちょくちょく身内でみていた。
こんなくだらないサービスを趣味で作っていた。
その他、仕事で使う新しいツールの実験導入などに利用していた。
社会人になってからリモートで接続できるサーバを持っている必要がなくなってきたので解約することになったが、
いろいろと勉強になったし、思い出がおおかったなー。
またいつか契約する日があることを待ち望んで…</description>
    </item>
    
  </channel>
</rss>