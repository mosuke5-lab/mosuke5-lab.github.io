<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/docker/</link>
    <description>Recent content in Docker on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 03 Jul 2016 22:45:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim::Factory、LTではなす</title>
      <link>https://blog.mosuke.tech/entry/2016/07/03/224531/</link>
      <pubDate>Sun, 03 Jul 2016 22:45:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/07/03/224531/</guid>
      <description>7月6日の会社のエンジニアイベントでLTするやつ、先にあげておく。
自分の中でのネタとしては古いけど、話すのはなんだかんだ初。</description>
    </item>
    
    <item>
      <title>DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った</title>
      <link>https://blog.mosuke.tech/entry/2015/07/19/135844/</link>
      <pubDate>Sun, 19 Jul 2015 13:58:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/07/19/135844/</guid>
      <description>2014年の秋から@mogulla3と定期的にインフラ関連技術の勉強会をやってきましたが、
インプットの勉強会だけでは飽き足らず、いつしかサービスを作る中でインフラ関連技術を駆使し勉強したいと思うように…
そして、普段使っているVimを題材に、
vimの設定をブラウザ上で即体感できるサービス Vim::Factory
を開発しました。
本記事はVim::Factoryの簡単な紹介と技術的な仕組みについて記述しています。
Vim::Factoryはこちら。
http://vimfactory.com/
1. Vim::Factoryについて 1-1. Vim::Factoryってなに？？ Vim::Factoryは、選択したVimの設定を、ブラウザ上で「即体感」できるサービスです。
数多くあり複雑なVimの設定を容易にし、お気に入りのVim探しをサポートすることを目指しています。

1-2. なんで作ったの？ Vimの設定ってたくさんあってどれを選んでいいかわからなかったり、
設定したもののどう変わったかイマイチわからなかったりしませんか？
Vimの設定がどのように反映されるか、もっと簡単に体験したいと考えたからです。
あと、例えばGithubで100star以上をつける人のVimをブラウザ上で体験できたらいいなと思っていて、
それを実現のための第一歩としてこのサービスを作りました。
1-3. このサービスの最大の特徴は？ このサービスの最大の特徴はなんといっても「ブラウザ上でVimが体感できること」です。
今まではVimの設定を試そうと思ったら、ネットで調べて自分のVimに反映させて…という作業が必要でしたが、
ブラウザ上で設定を即体感するという新しい体験を提供するために力を注いできました。
その実現方法については、後述しています。
1-4. 紹介動画 詳しくは、実際に試してもらうのが早いと思いますが、簡単な操作動画を用意してみました。
モバイルからこのサービスはちょっと使えないので、モバイルで読んでいる方は動画でお楽しみください(笑)
www.youtube.com
2. Vim::Factoryの技術について ここからVim::Factoryの技術について一部ではありますがご紹介します。
2-1. ブラウザ上でのVimを実現した技術 ブラウザ上でVimを実現しようと思うと、ぱっと思いつくのはJavaScriptでVimそのものを実装してしまおうというものかもしれません。
ですが、JSでVimを実装することってどれくらい難しいでしょうか？
少なくともぼくにはそんなことはできませんし、できたとして質の悪いものになってしまうと思います。
そこで思いついたのが、一般的なターミナルソフトと同様にサーバ上でvimを起動し、
そのターミナル情報をブラウザ上で表示するという方法です。
この方法であれば自らVimを実装せずともVimを再現できます。イメージは下記のとおりです。

また、サービスとして上記を行うには、接続してきたユーザごとにVimを用意する必要があります。
これらを実現するために利用したのがDockerとWebSocketです。
dockerコンテナ上でVimを起動し、そのターミナル情報をWebSocketでブラウザに送信するようにしました。 
dockerはコンテナ型の仮想化なので起動がとてもはやく、
httpのリクエストが来てからdockerコンテナを立ち上げても十分なほどのはやさをもっています。
2-2. 全体構成 システムの全体構成は以下のような感じです。
※実際の役割は図のとおりですが、サーバはこんなに多くありません。

2-3. 利用した技術とかツールのまとめ 振り返りも兼ねて利用した技術・ツールを一覧にまとめておきます。
 Ruby Sinatra thin node.js Websocket memcached docker nginx centos7 Ansible Vagrant gitlab mackerel slack  esa.</description>
    </item>
    
    <item>
      <title>リモートのサーバでdockerを起動させるときの端末割り当て</title>
      <link>https://blog.mosuke.tech/entry/2015/02/07/144208/</link>
      <pubDate>Sat, 07 Feb 2015 14:42:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/02/07/144208/</guid>
      <description>自分がハマったのでメモ。
リモートのサーバでdocker runを実行し(/bin/bash)、ローカル側でシェルを操作したかった。
sshでリモートサーバに接続し、docker runすればいいや、と思い以下を実行してみた。
ssh user@host &#39;docker run -t -i image_name /bin/bash&#39;  そうすると
[root@0c6742f02bd9 ~]# [root@0c6742f02bd9 ~]# ^[[A^[[A^[[C  エンターを押すと2行されるし、矢印キーはキーコードがでてしまう。
これを解消するのには以下のようにすればいい。
ssh -t user@host &#39;docker run -t -i image_name /bin/bash&#39;  -tとはなんなのか、なぜこのような事象が起きたのか、これからしっかり調べる。</description>
    </item>
    
    <item>
      <title>dockerで特定ユーザでログインした状態のシェル環境を提供する</title>
      <link>https://blog.mosuke.tech/entry/2015/01/24/213255/</link>
      <pubDate>Sat, 24 Jan 2015 21:32:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/01/24/213255/</guid>
      <description>dockerの一般的な利用の仕方ではあまり想定されないケースかもしれないが、
特定のユーザでログインした状態のコンテナを作りたいという場面に遭遇した。
&amp;lt;やりたいこと&amp;gt;  特定のユーザでログインした状態のシェルを提供すること その際、ユーザの.bash_profile（あるいあは.bashrc）を読み込んだ状態であること  .bash_profileに記載したPATHやaliasを使いたい ユーザのログインシェルを利用したい（カスタマイズされたシェルとか）    docker runに-uオプションがあるし、これで余裕！と思った。
[host] $ sudo docker run -u=user_name -i -t image_name /bin/bash  しかし…以下を確認してみると…
[docker] $ pwd [docker] $ echo $PATH [docker] $ alias  ディレクトリは &#34;/&#34; だし、PATHも通ってない。
どうやら.bash_profileなどは読んでいないようだ。普通にログインした状態とは違う。
dockerで-uでユーザを指定し場合、指定したuserでコマンドを実行するが、
サーバにユーザでログインしてからコマンドを実行するわけではないらしい。
ディレクトリはどうやら-wオプションで解決できるようだが…
[host] $ sudo docker run -u=user_name -w /home/user_name -i -t image_name /bin/bash  [docker] $ pwd /home/user_name  ディレクトリはおっけーだが、当然ながら依然として.bash_profileはダメ。
そこでふと思いついた。-uも-wもいらない。
あの手があるではないか…！！
[host] $ sudo docker run -i -t image_name su - username  suでスイッチユーザすれば.</description>
    </item>
    
  </channel>
</rss>