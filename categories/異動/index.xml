<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>異動 on Goldstine研究所</title>
    <link>https://mosuke.tech/categories/%E7%95%B0%E5%8B%95/</link>
    <description>Recent content in 異動 on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 29 Jul 2016 18:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://mosuke.tech/categories/%E7%95%B0%E5%8B%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>社内システム開発からパブリッククラウドの会社へジョインします</title>
      <link>https://mosuke.tech/entry/2016/07/29/180000/</link>
      <pubDate>Fri, 29 Jul 2016 18:00:00 +0900</pubDate>
      
      <guid>https://mosuke.tech/entry/2016/07/29/180000/</guid>
      <description>本日、2016年7月29日をもって、新卒から３年４ヶ月働いてきた部署が最後となり、8月1日から異動（出向）する。
社内転職制度を使って、自らの希望でパブリッククラウド事業の会社へジョインすることになった。
（新規事業を行う部署へ異動となり、そこから別会社へ出向という扱い）
グループ内の異動ではあるが、違う会社・事業で、職種も変わるので、今の部署でやってきたことをまとめて残しておこうと思う。
私は通信会社のネットワーク運用部隊に所属している（いた）。
ネットワーク運用部隊なのだが、私の部署はネットワーク運用を自動化したり運用を楽にするためのシステム開発を担うところで、下記のような仕事をしてきた。
1. ベンダーコントロールという仕事 システム開発にはうちでは外注物も内製物（後述）もある。
業務の都合上、システムの種類によってはSIベンダーへ発注をして作ることがあった。
ベンダーコントロールなんて言ったりするが、発注でのシステム開発の業務では下記のようなことをしてきた。
 要求仕様の検討 見積もり依頼と価格交渉 発注、スケジュール調整 社内での業務調整 受入試験、検収  運用  仕事のほとんどは、社内外の人との調整（コミュニケーション）だ。
エンジニアとしては一見つまらなそうな仕事にみえるかもしれない。
しかし、この仕事から様々なコミュニケーションを学び、それはいろんな場面で役に立っている。
例えばだが、以下の様なコミュニケーションがあったりした。
 要求を他者にしっかり、わかりやすく伝える 仕様や価格についての折衝をする システムの利用部門との業務調整をする 作業の手順について精査し指摘する ミスなど良くないことが起きた際には、今後の対策はどうするか相手側に考えさせるよう導く 場合によっては厳しく叱ることもする（感情的に怒るわけではない）  特に価格の折衝などは、SIerや購買部と激しく激突することもあり今でもとても印象に残っている。
こういった業務はビジネスマンとしてとても大事なことを学んだと思うし、内製での開発業務でもとても活きてきている。
外注はいいけど・・・ 社内リソースが少なくても同時並行でいろんなシステムの開発ができるし外注はいい。
一方で外注開発について、もどかしさや非効率さなどもたくさん経験してきた。
まず、なにをやるにもお金と時間がかかることだ。
一度納品されてしまったものについて、なんらかの改修をしたい場合、
その改修規模を問わず、見積もり→発注→開発・改修→納品のプロセスを通さなければならない。
if文を１行追加するだけだろ…って思うようなものでも数百万で数週間かかることだってあった。
そして、プロセスの効率化が難しいことだ。
ベンダーが開発したシステムをリリースするには、発注側の会社に度々きてリリース作業を行う。
勝手に発注側のシステムをアップデートすることはありえないので、必ずリリース作業には社員が立ち会わなければいけない。
そのとき、リリース作業が自動化されていないことも多く（発注時の要求によってもちろん異なる）、
何時間もかけて数十台のサーバにデプロイしたりしなければいけなかったりするので大変だ。
これは当たり前だがとても効率が悪いし時間の無駄だ。
だがこれを改善しようと思うとまたお金がかかるわけである。
扱っているシステムが、業務システムなのでアップデートの頻度がおおくないこともあるので、
はじめからデプロイの自動化などを要件にいれることは少ないのである。
これらはSIの開発をディスっているわけではない。（要求も悪いのはわかる。）
これは仕方ないこととして、そのメリット・デメリットをきちんと理解した上で選択、要求をしなれけばいけないということだ。
2. 内製開発の仕事 外注開発とは別にシステムの内製での開発業務も多くおこなってきた。
社内的には外注開発から内製開発に徐々に切り替えの最中であった。
ちなみに開発言語はRuby（RailsやPadrino）やPHP（FuelPHP）なんか使っていた。
業務システムの他にもメールサーバやリバースプロキシサーバなど基盤システムも構築してきた。
2015年の振り返りブログに雑だが少し書いていた。
2015年振り返り - Goldstine研究所 開発組織の改善活動 また、開発組織を改善するための活動をおおく行ってきた。
どこの組織でもある問題だと思うが、うちもまた「属人化」「秘伝のタレ」などといった類の悩みをたくさん抱えていた。
うちはソフトウェア企業ではないし、システムを外注で作る部署も多い。
そのため、新卒や異動してくる人などがソフトウェアエンジニア思考の人ばかりではない。というかむしろ少数派。
だからこそ、よりいっそう「属人化」「秘伝のタレ」が弊害となる。
わかりやすいところでいうと下記のようなことをやったりして開発組織の改善をしてきた。</description>
    </item>
    
  </channel>
</rss>