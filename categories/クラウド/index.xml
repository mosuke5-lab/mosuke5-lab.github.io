<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>クラウド on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89/</link>
    <description>Recent content in クラウド on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 16 Jul 2017 13:45:59 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【更新中】Architecting for the Cloud -AWS Best Pravtices-を解読する</title>
      <link>https://blog.mosuke.tech/entry/2017/07/16/architecting_for_the_cloud/</link>
      <pubDate>Sun, 16 Jul 2017 13:45:59 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/07/16/architecting_for_the_cloud/</guid>
      <description>本記事について 本記事は、AWSソリューションアーキテクト認定試験の試験勉強として、「Architecting for the Cloud」を読んでいて、そのまとめです。完全な翻訳ではありません。私の勝手な解釈もいくぶんか含んでいます。その点、理解した上でご自身の学習の参考にしてください。
要約 このドキュメントはAWS上にソリューションを構築するソリューションアーキテクトや開発者のために向けて書かれたものです。 AWS上での設計パターンやセキュアで信頼性のある、ハイパフォーマンスで、コスト効率のいいシステムをどのように設計したらいいかのアドバイスを提供します。これはクラウドの特性（エラスティック性やインフラの自動化）をどのように活かすかという話題も含みます。
導入 大きな変更なく、AWSへアプリケーションを移行できることは、組織にとってセキュリティやコストの面で大きなメリットをもたらします。しかし、クラウドコンピューティングか可能にするエラスティック性やアジリティ性を有効活用するためには、エンジニアはアプリケーションのアーキテクチャを進化させる必要があります。
新しいアプリケーションに対しては、クラウド特有のアーキテクチャパターンを適応させ、効率性・拡張性を確保しています。このようなアーキテクチャはリアルタイムの大規模データ分析からIoTデバイスからの大量のトラフィックを受けるアプリケーションまでどのようなものにも対応します。
このドキュメントは既存のアプリケーションをAWSへ移行するか、クラウドに適した新しいアプリケーションを設計するか検討するための設計原則をしめします。
クラウドコンピューティングの違い IT資産がプログラマブルになる クラウドではない環境では、最大のピークに合わせてサーバの調達、プロビジョニングが必要でした。これは、リソースが働いていない時間帯を発生させ、余剰コストがかかることになります。クラウドコンピューティングを利用することで、需要に応じて必要な分だけリソースを利用することができ、またその分のお金を払えばいいことになります。 AWSではサーバやデータベース、ストレージなどを僅かな時間で調達することができます。そのため、リソースを一時的に使い捨てすることができます。有限で固定的なITインフラから開放されます。これは、いままでの管理方法やテスト方法、キャパシティプランニングなどを変えてしまいます。
グローバルに利用できる制限のないインフラ AWSのグローバルインフラストラクチャを利用することで、アプリケーションを最適のリージョンにデプロイすることができます。エンドユーザの近く、コンプライアンス、コストなど最適な場所を選んで。グローバルアプリケーションにとって、CloudFrontを使うことで世界中でユーザに近いロケーションから配信できるので、レイテンシーを少なくできます。また、複数のデータセンターをまたいだプロダクションアプリケーションやデータベースを運用することはとても簡単です。
マネージドサービス EC2のコンピュートリソースの他に、AWSカスタマーは様々なストレージやデータベース、分析、アプリケーション、デプロイサービスを利用できます。これらのサービスは開発者が簡単に利用できるようになっているので、組織内の特殊なスキルの依存から開放できるし、新しいソリューションをより早く提供することができるようになります。これらのサービスはAWSによって管理され、運用の複雑さやコストを下げることができます。AWSのマネージドサービスはスケーラビリティとアベイラビリティをもって設計されているため、自前の実装のリスクを下げることができます。
セキュリティ 従来のITでは、インフラのセキュリティ監査は、定期的にそして手動で行われるものでした。AWSでは、設定の変更に対しての継続的な監視を可能にすることができます。AWSのリソースはプログラマブルなため、セキュリティポリシーを形式化（コード化）することができ、インフラ設計の一部として組み込むことができます。セキュリティテストは継続的デリバリーの一部とすることができるのです。結果的に、ソリューションアーキテクトは、より高度なデータ保護やコンプライアンスを実現するためのAWSの多くのセキュリティや暗号化機能を最大限活用できるようになります。
設計原則 拡張性 時間とともに成長を期待されているシステムは、拡張可能なアーキテクチャで構築される必要があります。そのようなアーキテクチャはユーザ、トラフィック、データの増加にもパフォーマンスを落とすことなく対応できます。クラウドコンピューティングは制限がないオンデマンドな拡張を提供しています。そのメリットを活かした設計をしていく必要があります。一般的に垂直スケーリングと水平スケーリングがあります。
垂直スケーリング（スケールアップ） 垂直スケーリングは個々のインスタンスのスペックを上げることで行います。例えば、インスタンスのCPUスペックを上げるなど。 AWS EC2ではインスタンスを停止しリサイズすることで、簡単に垂直スケーリングができます。 この方法のスケーリングには限界があり、必ずしもコスト効率がよくいつでも利用できる方法ではありません。しかし、とても簡単で一時的にはたいてい多くのケースで解決できるものでもあります。
水平スケーリング 水平スケーリングは、インスタンスの数を増やすことでスケールする方法です。クラウドコンピューティングの弾力性を活かしていて、インターネットのアプリケーションにおいては効果的なスケールする方法です。
ステートレスアプリケーション ユーザやサービスがアプリケーションを利用する時、たいていはセッションを使って一連の操作を行います。ステートレスアプリケーションはセッション情報を保持しないアプリケーションです。例えば、どんなユーザにも同じ結果を返すアプリケーションです。このアプリケーションではどのサーバ・インスタンスから情報を返してもいいので、水平スケーリングができます。
ステートレスコンポーネント 実際には、ほとんどのアプリケーションはなんらかの状態を持ちます。Webアプリケーションではユーザがサインイン状態かどうかトラックする必要があるし、前のアクションに応じてパーソナライズドされた情報を提供する必要があります。自動化された複数のステップをもつ処理もまた、次に何を行うか決定するために前のアクションをトラッキングする必要があります。
例えば、WebアプリケーションはHTTPクッキーを使ってクライアントブラウザのセッションを保持することができます。ブラウザはその情報をサーバ側に後に起こるリクエストごとにおくります。そのため、アプリケーション側で保持する必要はありません。しかしこの方法には２つの欠点があります。１つは、HTTPクッキーの情報はクライアントサイドで改ざんされる可能性があります。そのため、サーバ側はつねに、バリデーションするべき信頼できない情報として扱わなければいけません。２つは、HTTPクッキーは毎回のリクエストで送信されます。つまり、そのサイズを常に最小にする必要がでてきます。
HTTPクッキーに一意のセッション識別子を格納し、サーバー側で詳細なユーザーセッション情報を格納することだけを考えましょう。ほとんどのプログラミングプラットフォームは、このように動作するネイティブのセッション管理メカニズムを提供しますが、これはデフォルトではローカルファイルシステムに格納されることがよくあります。これにより、ステートフルなアーキテクチャが実現します。この問題の一般的な解決策は、ユーザーセッション情報をデータベースに格納することです。Amazon DynamoDBはスケーラビリティ、高可用性、および耐久性の特性をもつために最適な選択肢です。多くのプラットフォームでは、オープンソースのライブラリがあり、セッションをAmazon DynamoDBに保存することができます。
他のシナリオでは、より大きなファイル（例えば、ユーザアップロード、バッチプロセスの中間結果など）の記憶が必要である。 これらのファイルをAmazon S3やAmazon Elastic File System（Amazon EFS）などの共有ストレージレイヤに配置することで、ステートフルなコンポーネントの導入を避けることができます。もう1つの例は、各実行の現在の状態を追跡する必要がある複雑なマルチステップワークフローです.Amazon Simple Workflow Service（Amazon SWF）を使用して、実行履歴を一元的に保存し、これらのワークロードをステートレスにすることができます。
ステートフルコンポーネント 必然的に、ステートレスコンポーネントにすることのできないアーキテクチャのレイヤーもあるでしょう。まずはじめに、定義的にデータベースはステートフルです。加えて、多くのレガシーアプリケーションはローカルのリソースに依存し、１つのサーバ上で動作するように設計されています。さらに、他のユースケースでは、特定のサーバと長時間コネクションを維持するクライアントを必要とするかもしれません。例えば、リアルタイムのマルチプレーヤーゲームでは、非常に低レイテンシーでプレイヤーにゲーム世界のビューを提供しなければいけません。これは、プレーヤーが同じサーバに接続する非分散的な実装のほうが、実現が簡単です。</description>
    </item>
    
    <item>
      <title>AWS Summit2017 Day2のぞいてきた。 ネットワーク設計入門メモ</title>
      <link>https://blog.mosuke.tech/entry/2017/05/31/aws_summit_network/</link>
      <pubDate>Wed, 31 May 2017 19:25:20 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/05/31/aws_summit_network/</guid>
      <description>はじめに 弊社はプレミアムフライデー導入企業なのだが、最終金曜日に早く帰る必要はなく、月内でどこか1日15時に帰りましょうという制度になっている。
金曜日が仕事の都合上取れなかったので、今月は5/31にプレミアムフライデー（プレミアムウェンズデー）を使った。
ちょうどAWS Summit開催中だったのでのぞきにいった。
雰囲気 想像していた雰囲気とはだいぶ異なっていたというのが第一印象。
想像以上にスーツの年齢層の高い人が多かった。それだけ、AWSもエンタープライズでも注目されるようになったということだろう。
以前に、JAWS2015に参加したことある。もちろんJAWSとAWS Summitでは参加者の層が違う。
が、あれから2年たちAWSに興味を持つ層も大きく変わってきたのを感じた。
セッションも非IT企業への導入事例や、思ったより入門セッションも多かった。
登壇者の話しぶりも「オンプレからの移行」を意識したように感じた。
ブース セッションだけではなく、AWSに関連するサービスを提供している企業がたくさんブースをだしている。
ここでのコミュニケーションが案外一番楽しい。お酒も用意されていて楽しくおしゃべりできた。
Heroku+AWSの組み合わせで利用するケースの話を聞いて、あーなるほどねって感じだった。
HerokuはAWS上で動作しているし、インターネット経由してもそこまで遅くはならない。
そんな利点を使って組み合わせて使う事例なんかきいた。
そのほかは、やっぱりどこもかしこもコンテナ。
コンテナをどう扱うか、どう監視するか、そんなところの話が多かった。
セッション「ネットワーク設計入門」 セッションは１つだけ「ネットワーク設計入門」を聞いた。
普段ならネットワーク設計入門のセッションは聞かないと思っているのだが、
どんなことを話すのか興味あって聞いてみた。
(1)クラウド上のNWの特徴  物理設計はいらない 可用性はすでにセット(VRRPなど気にしなくてよい） プロフラマブルに操作可能  (2)NWサービス NWサービスは意外とすくない。VPCがほぼすべて。
VPCが本質であり、ここが理解できればほぼ問題ない。
 VPC Direct Connect Route53  (3)前提知識 VPC 物理設計はいらないんだけど、
やっぱり物理知っていることがアドバンテージになる。 VPCはリージョンの中のみ。ゾーンはまたぐことができる。
専用線 当たり前だがDCの場所は公開していない。
じゃどうやって接続するか？
相互接続接続ポイントを用意しているからそこにつなぎに来てね、という考え方。
エッジロケーション CDNノードやRoute53が動作しているところ。
リージョンとはまた別にある。
(4)設計をはじめよう AWSのどのサービスを使いたいかでNWの設計方針はかわる。
まずはVPCの中で利用するサービスとVPCの外で使うものがあるのでその区別。
 VPCの中で使うもの  EC2とかRDSとかRedshift、EMR  VPCの外で使うもの  S3、LamdaとかDynamoDB、CloudWatch   次に、外部通信の設計
 VPCと外部を接続する場合  専用線orインターネットVPNorパブリック(ssh/https)  VPCがないけど外部から利用したい場合  httpsでまかなう場合が多い。 実は、VPCがなくてもDicrectConnectは使えるよ。  DirectConnectのパブリック接続    (5)プライベートNW設計のステップ  VPCの作成  VPCのCIDRレンジは変えられないから大きくとっておこう オンプレミスとのレンジも被らないように /16がおすすめ  サブネット作成  インターネットに接続するものとしないもの。ここでサブネット分けよう AZが落ちてもいいように設計しよう。サブネットは２つずつ サブネットサイズは24がおすすめ  VPCコンポーネントの作成  カスタマーGW インターネットGW VPC単位、サブネット単位、インスタンス単位で配置できるコンポーネントがあるよ  インスタンスの配置  セキュリティポリシーを考えよう セキュリティグループとネットワークACLがあるよ セキュリティグループのほうが柔軟  名前解決の検討  (6)ユースケースごとのNW設計 公開サービスの場合  インターネットから接続でいるのはロードバランサーだけにしよう  あるいはあとはメンテナンス用の踏み台サーバだけ  S3を活用するときは、VPCエンドポイントつかえばVPC内部から接続できるよ 管理拠点とはVPNでつなぐことをおすすめするよ 管理拠点とのルーティングはルートテーブル DNSはRoute53使うと便利だよ  ALIASレコードという独自機能 DNSのフェイルオーバー機能  ソーリーページへの転送が可能    社内システム基盤の場合  DirectConnectを使おう  パートナーがたくさんいるので連絡してみよう  Route53はプライベートゾーン、オンプレからVPC内の名前解決にも使えるよ DirectConnect体験ラボあるからつかってみて  https://aws.</description>
    </item>
    
    <item>
      <title>万能じゃない。オブジェクトストレージの仕組みと利用を正しく理解する</title>
      <link>https://blog.mosuke.tech/entry/2017/03/18/182252/</link>
      <pubDate>Sat, 18 Mar 2017 18:22:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/03/18/182252/</guid>
      <description>1.はじめに
Amazon S3をはじめとして、オブジェクトストレージが身近になってきています。
各クラウドベンダーはオブジェクトストレージサービスを提供しています。
 Amazon S3 Azure Blob Storage Google Cloud Storage Alibaba Cloud OSS Cloud n ObjectStorage IDCF オブジェクトストレージ  ですが、オブジェクトストレージをストレージの魔法として理解されているケースも多いように感じます。
原点に振り返ってそもそもオブジェクトストレージとはなんなのか。
どんな特徴を持っているストレージなのか。
気になってまとめました。
2.オブジェクトストレージとは オブジェクトストレージとは一言で言うと、
「オブジェクト単位（ファイル単位）で出し入れのできる、ネットワークストレージ」です。
オブジェクトストレージでは直接にストレージ上のファイルをRead/Writeすることはできません。
いうなれば、FTPサーバに近い存在と言えます。
今やクラウド上のストレージの代名詞として扱われるオブジェクトストレージですが、
実はファイルの出し入れしかできないストレージなのです！？！？
3.特徴 では、そんな出し入れしかできないFTPサーバに似たオブジェクトストレージですが、
その本当の特徴はどこにあるのでしょうか。
特徴1: ディレクリ構造の排除 1つ目の特徴としては、ディレクトリ構造でファイルを管理しないことです。
ディレクトリ構造は、もしストレージサーバのハードディスク容量がいっぱいになり、
ファイルを別のディスクに移動する場合、そのディレクトリパスも変更しなければいけません。
クラウドサービスのようなたくさんのユーザが利用し拡張性の求められる場面では、ディレクトリ構造は適さないのです。
そこで、オブジェクトストレージではディレクトリ構造ではなく、階層のないフラットな関係でファイルが保存されます。
すべてのファイルにIDが付与され、そのIDがどこに保管されているか別で管理する仕組みとなっています。
特徴2: 分散保存 2つ目の特徴は「分散保存」です。
オブジェクトストレージでは、ファイルを分散保存するアーキテクチャによって、
ファイルの冗長化と大量のファイルへのアクセスさばくことを可能にしています。
詳しくは次の「オブジェクトストレージのアーキテクチャ」の項目でご紹介します。
特徴3: アプリケーションからの利用を意識 3つ目の特徴はアプリケーションでの利用を強く意識していることです。
この項目は製品によって異なる部分もありますが、主な点を３つあげます。
(1)メタ情報管理 従来のファイルシステムでのファイルへのメタ情報は、ファイルのサイズや更新日付などが一般的でした。
オブジェクトストレージでは更にファイルの有効期限などを設定することができ、インフラ管理を容易にします。
(2)HTTPプロトコルを使ったインターフェイス  オブジェクトストレージでは、ファイルのアップロード、ダウンロードなどすべての操作はHTTPプロトコルを利用します。
HTTPのような汎用的なプロトコルを採用することにより、サーバからはもちろん、モバイル端末など幅広いデバイスから利用が可能です。
(3)Web公開機能 更には、保存したオブジェクトに対してURLを割り当てて公開することもできます。
静的なWebサイトの公開や、cssやJavaScript、画像ファイルなどを直接オブジェクトストレージへ取得しにいくこともできます。
4.オブジェクトストレージのアーキテクチャ  オブジェクトストレージとひとまとめにいっても、製品によってその実現方法は様々で異なります。
しかし、ここでは一例として利用されるアーキテクチャについて紹介します。
※ここで紹介するアーキテクチャがオブジェクトストレージのすべてのアーキテクチャを表すものではありません。また、わかりやすくするためかなり簡略化して記載しています。</description>
    </item>
    
    <item>
      <title>参加してきた、MSPJマイグレーションコンペ2017winter</title>
      <link>https://blog.mosuke.tech/entry/2017/02/20/184220/</link>
      <pubDate>Mon, 20 Feb 2017 18:42:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/02/20/184220/</guid>
      <description>先日、2017年2月18日に「MSPJマイグレーションコンペティション2017winter」に参加してきた。
MSPJマイグレーションコンペティション2017winterとは、
日本MSP協会コンペティショングループが主催する、 次代を担う若手運用技術者同士の交流・競争を通して日本のMSP事業者における運用技術の向上を目指したコンペティション。
もう少し平たく言うと、MSP事業者の本当の業務に近い形でのコンペを通じて、スキルアップを図りましょうというものだ。
自分はMSPの人じゃないけど参加は全然できた。
connpass.com
競技ルール 今回の競技のお題は、
「AWS上で動作しているレガシーなRedmineをAzure上に移行する」というものだ。
このコンペの特徴としては、実際にMSPでの業務に則し、お客さんから曖昧な要望を受けている部分や、
お客さん側にしかない権限については、お客さんと調整する必要があること。
例えば、環境の移行する際にはDNSの切り替えが必要だったのですが、DNSの設定権限は我々にはなくて、
Slackを利用して、DNS設定変更依頼や作業周知を出さなければいけなかった。
このあたりはとてもユニークなポイント。
お客さんからは移行について以下のような曖昧な要望をもらっていた。
&amp;lt;要望&amp;gt; - 今の環境を新しい環境に完全移行して欲しいです。 - 実施した内容と結果については報告が欲しいです。 - システムを止めるときは利用者に告知が必要なので連絡が欲しいです。 - 昔から使っている古い環境なので、バージョンアップして欲しいです。 - できれば利用者に影響を出さないように切り替えたいです。 - できればサーバに関する資料があるとありがたいです。 - できれば今はまったくバックアップを取っていないのでバックアップを取れるようにしたいです - できれば今後は利用者が増えるのでシステムを冗長化したいです。 - できれば新しいインフラエンジニアに引継ぎするために必要な情報がまとまっていると嬉しいです。 &amp;lt;担当者のコメント&amp;gt; - 前任のインフラエンジニアが辞めちゃったのでこのシステムもう分かる人がいなくって。 - 結構前から使っているので環境も古くなっているみたいで、OSのサポートがもうすぐ切れるって話を聞いたものですから、セキュリティとか色々心配で何とかしたいんです。 - みんなこのシステムを結構便利に使っていてくれているようだから、システムを切り替えるときは連絡しないとなぁ。 - そうそう、近々新しいインフラエンジニアが入社予定だから、その方に引き継げるようになっていると嬉しいですね。  ちなみにチームについては、当日の参加者で適当に3人チームを作って行った。
一緒の参加者が同じチームにならないように調整された。
構成把握 開始後、まずやったことが環境・構成の把握。
ざっと下記のような感じ。ログインしてすぐに、pstree みて大体の構成を把握した。
 インフラ: AWS(EC2) OS: CentOS5.2 Webサーバ: Apache2.0 + Passenger DB: MySQL5.1  Ruby: 1.9  Redmine: 2.3  DNS; Route53で管理。権限はお客さんのみ サーバ構成: サーバ1台のシングル構成  移行作戦 細かなバージョンはおいておいて、最終的に目指す構成は下記のようにした。</description>
    </item>
    
    <item>
      <title>クラウド上でのWordPressのスケールアウトを考える</title>
      <link>https://blog.mosuke.tech/entry/2017/01/04/223544/</link>
      <pubDate>Wed, 04 Jan 2017 22:35:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/01/04/223544/</guid>
      <description>複数台サーバでのWordPressの構築・運用について考える。
実際に、とあるクラウドで分散環境のWordPressを構築したのでその知見をまとめる。
なるべく特定のクラウドに特価しないものとして記載したい。
やりたいこと  スケールアウトできるWordPress環境を作る  SSLに対応する HTTP/2に対応する  AWSなどのクラウド環境で構築する  アーキテクチャ まず先に全体のアーキテクチャ図から示す。
これから各項目について解説していく。

 SSL・HTTP/2への対応 まずSSLへの対応だが、通常ならばロードバランサをSSLの終端とし下記のような構成にすることが多いだろう。
この場合はロードバランサをL7のものとして稼働させる。

しかし、HTTP/2に対応しようと思うと事情は異なってくる。
（もちろん、最近ではAWSのALBのようにHTTP/2に対応する製品がでてきているのは承知だが。）
現在のパブリッククラウドで利用できるロードバランサの多くはまだHTTP/2に対応していない。
そのため、ロードバランサをL4として稼働させ、配下のWebサーバにてHTTP/2を処理する必要がでてくる。
この場合、ロードバランサはTCPでポート443を待ち受けるようにし、配下のWebサーバへポート443のままでフォワードすればいい。

クラウド環境ではWebサーバがスケールすることは前提にいれることがおおい。
そのため、この場合のSSL証明書はN台に対応した製品を買う必要がある。
例えば以下のような製品など。
 SureServer for クラウド｜Cybertrust.ne.jp  データベースの分離 分散環境でのWordpressでは共通したコンテンツを配信するため、データベースはもちろんWebサーバとは分離したほうがいい。
それぞれのWebサーバは共通のデータベースを見に行くべきだ。
データベースを自前で冗長化しても構わないが、それなりの運用コストがかかることは容易に想像がつくので、
クラウドのマネージドデータベースサービスを利用した。
 Amazon RDS（クラウドでのリレーショナルデータベースサービス） | AWS ApsaraDB for RDS - データベースホスティング | Alibaba Cloud  管理画面 管理画面のみを分離するアーキテクチャも考えられるが、ここではそうしないこととする。
管理画面へのログインセッションの保持は、別途KVS(RedisやMemcached)に保存してもいいと思う。
ですが、WordPress4.0以降ではデフォルトではMySQLへセッションを保存するので必須の対応ではないといえる。
github.com
記事で使うアップロード画像などの対応 管理画面から記事を投稿するとする。
記事のデータはデータベースに保存されるためどのWebサーバからも記事を参照できる。
しかし、記事に含まれる画像データはどうだろうか。
通常のWordpressでは管理画面サーバの/wp-content/uploads以下に画像を保存する。
複数台Webサーバがある状態で、たまたまアクセスしているサーバに画像を保存しても、他のサーバからは参照することができない。
これに対するソリューションはいくつかあるだろう。
例えば、rsyncなどを使って他のサーバと画像ファイルを同期するとか、画像用のストレージを用意しNFSで参照するとか。
冗長化の観点からもここはオブジェクトストレージのサービスを利用するのがいいだろう。
例えば、下記のような製品だ。</description>
    </item>
    
    <item>
      <title>三葉よ、サーバーレス、それもまた結び。</title>
      <link>https://blog.mosuke.tech/entry/2016/10/02/212420/</link>
      <pubDate>Sun, 02 Oct 2016 21:24:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/10/02/212420/</guid>
      <description>タイトルちょっとふざけました。 (が、半分本気。最後の方でわかる。)
ServerlessConf Tokyoに参加してきた。
今年8月からパブリッククラウドの事業に異動していて、
開発者の立場よりクラウド提供側の立場として参加してきたので、また面白かった。
せっかくなので、自分なりにサーバレスについてまとめる。
新しいことというよりは、自分の中での整理した感じ。
1. サーバレスってなんだっけ カンファレンスの中でもサーバレスの定義についてはいろいろな意見がでていた。
Martin Fowlerのブログではサーバレスの定義として下記２つが書いてある。
 BaaS (Backend as a Service) : ex) firebase FaaS (Function as a Service) : ex) AWS Lambda  martinfowler.com
ですが、ここでは焦点を絞って話すためにもFaaSということにしておく。
主にFaaSについて話したいのと、BaaSもいれてしまうとSaaSもサーバレスとかややこしいことになるので。
 AWS Lambda なんといってもサーバレスの概念を推し進めたのはAWS Lambdaでしょう。
説明はいまさら不要だと思うが、少しだけ。
コードを AWS Lambda にアップロードすると、サービスが AWS インフラストラクチャを使用してコードの実行を代行するコンピューティングサービスです。コードをアップロードして、Lambda 関数と呼ばれる関数を作成することで、AWS Lambda がコードを実行するサーバーのプロビジョニングおよび管理を行います。(https://aws.amazon.com/jp/lambda/details/)
 課金モデルは関数呼び出した回数、および実行に利用したコンピュートのスペックによって決まる。
また特徴的なことは、AWSの他のサービスで発生したイベントをトリガーに実行できること。
例えば、Amazon S3にファイルアップロードされたことをトリガーにLambdaを実行できるのだ。
サーバレスの特徴 サーバレス自体そしてサーバレスで実装することの特徴しては下記がある。
  クラウド上のイベントを契機に実行できる 実行環境は、immutableで時間が立つと消える 実行環境は独立していて、コードは基本的にstatelessである 上記のようにimmutableでstatelessな構造につくるからこそスケールしやすい  2. どんな用途で利用しているか  クラウド基盤のイベントをトリガーとして 個人的に一番強力だと思っている使い方。上で説明したとおりだが、クラウド上のプロダクトに対してのイベントをトリガーに処理を行うことができる。</description>
    </item>
    
  </channel>
</rss>