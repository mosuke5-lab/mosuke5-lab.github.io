<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vimfactory on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/vimfactory/</link>
    <description>Recent content in Vimfactory on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 03 Jul 2016 22:45:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/vimfactory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim::Factory、LTではなす</title>
      <link>https://blog.mosuke.tech/entry/2016/07/03/224531/</link>
      <pubDate>Sun, 03 Jul 2016 22:45:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/07/03/224531/</guid>
      <description>7月6日の会社のエンジニアイベントでLTするやつ、先にあげておく。
自分の中でのネタとしては古いけど、話すのはなんだかんだ初。</description>
    </item>
    
    <item>
      <title>Vim::Factory、LTではなす</title>
      <link>https://blog.mosuke.tech/entry/2016/07/03/224531/</link>
      <pubDate>Sun, 03 Jul 2016 22:45:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2016/07/03/224531/</guid>
      <description>7月6日の会社のエンジニアイベントでLTするやつ、先にあげておく。
自分の中でのネタとしては古いけど、話すのはなんだかんだ初。</description>
    </item>
    
    <item>
      <title>2015年振り返り</title>
      <link>https://blog.mosuke.tech/entry/2015/12/28/150042/</link>
      <pubDate>Mon, 28 Dec 2015 15:00:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/12/28/150042/</guid>
      <description>去年に続き、2015年で技術分野でなにがあったか簡単に振り返りました。
2014年を思い返して… - Goldstine研究所
1. Vim::Factoryの開発と公開 
2014年の秋から@mogulla3と定期的にインフラ関連技術の勉強会をやってきていて、
はじめはインプットの勉強会だけを主にやってきていたのですが、
サービスを作る中でインフラ関連技術を駆使し勉強したいと思うようなっていました。
そこで、今年は「vimの設定をブラウザ上で即体感できるサービス Vim::Factory」の開発をしました。
DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った - Goldstine研究所
良かった点  新しい技術などを組み合わせながら学習しがいのあるサービスを作れたこと サービスの実現技術を公開しそれなりの反響を得られたこと  悪かった点  内部的なアーキテクチャの変更ばかりに時間を取られサービスそのものの改良ができなかったこと  2. インフラ関連の構築や運用、仕組みづくり 主に仕事の話になりますが、今年はインフラ関連の構築や運用に多く携わった気がします。
（結構、雑な感じに書き残します。）
(1) メールサーバの構築と運用 Postfixを使ったメールサーバの構築と運用に携わりました。
 そもそもメールサーバってなんだっけってところからはじまったのを思い出します。 とにかく運用を楽にしたかったので、その部分に多くの工夫をしました。 Ansibleを使って設定の変更などのリリース作業も簡単することや Zabbixのログ監視もいい感じに機能して、不正なメール送信とかもすぐ検知できるようにしました。  KVMの仮想環境上なので、環境の作りなおしも容易にしました。 冗長性のために２つのリージョンに分散させたりもしました。 目新しいことはないですが、わりと運用が楽な感じに作れたのでほんとによかったなと振り返って思います。  (2) インターネットから社内NWへの入口としてのリバプロサーバ構築 インターネットから社内NWにあるシステムを利用できるようにするために、
リバースプロキシサーバを構築しました。（運用はこれから）
いわゆるDMZ構成におけるリバプロです。
 技術的なところで言うと、corosync+pacemakerを使ってクラスタリングを組みました。  クラスタリングは思ったより奥が深く、どのようなクラスタを組むかかなり苦労しました。 障害時に相手側サーバの電源を落とす、いわゆるフェンシングなどをどう適切に使うかなど。 運用が始まってからそのあたりの実用性が確認できそうです。 ちなみにNginxでリバースプロキシたてました。  (3) 仮想環境構築とか 仮想環境というと、今までVagrantなどのツールとして、AWS、VPSなどのIaaSとして使うばかりでした。
今年は、KVMを利用してプロダクションの仮想基盤を作るなどやりました。
仮想化ってそもそもなんだっけ？というもう少し基礎よりの知識と向き合う機会がありました。
また、主に来年の話になるがOpenStackなどを使ったクラウド環境を「作る・運用する」にも携わっていきそうです。
すこしづつOpenStackをかじり始めました。
(4) Ansibleの活用と布教活動 Ansibleの利用は去年から始めていたことですが、
今年はより活用することと、社内での布教活動を行いました。
活用でいうと、サーバの構築はAnsibleで行ってアプリケーションのデプロイは
別の方法でやる（手動とか…）というふうになっていたので、
Ansibleを使ってアプリケーションのデプロイまですべて行うようにしてきました。
また、こういった取り組みを社内（部内）で広めて他のチームにも活用してもらおうと、</description>
    </item>
    
    <item>
      <title>2015年振り返り</title>
      <link>https://blog.mosuke.tech/entry/2015/12/28/150042/</link>
      <pubDate>Mon, 28 Dec 2015 15:00:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/12/28/150042/</guid>
      <description>去年に続き、2015年で技術分野でなにがあったか簡単に振り返りました。
2014年を思い返して… - Goldstine研究所
1. Vim::Factoryの開発と公開 
2014年の秋から@mogulla3と定期的にインフラ関連技術の勉強会をやってきていて、
はじめはインプットの勉強会だけを主にやってきていたのですが、
サービスを作る中でインフラ関連技術を駆使し勉強したいと思うようなっていました。
そこで、今年は「vimの設定をブラウザ上で即体感できるサービス Vim::Factory」の開発をしました。
DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った - Goldstine研究所
良かった点  新しい技術などを組み合わせながら学習しがいのあるサービスを作れたこと サービスの実現技術を公開しそれなりの反響を得られたこと  悪かった点  内部的なアーキテクチャの変更ばかりに時間を取られサービスそのものの改良ができなかったこと  2. インフラ関連の構築や運用、仕組みづくり 主に仕事の話になりますが、今年はインフラ関連の構築や運用に多く携わった気がします。
（結構、雑な感じに書き残します。）
(1) メールサーバの構築と運用 Postfixを使ったメールサーバの構築と運用に携わりました。
 そもそもメールサーバってなんだっけってところからはじまったのを思い出します。 とにかく運用を楽にしたかったので、その部分に多くの工夫をしました。 Ansibleを使って設定の変更などのリリース作業も簡単することや Zabbixのログ監視もいい感じに機能して、不正なメール送信とかもすぐ検知できるようにしました。  KVMの仮想環境上なので、環境の作りなおしも容易にしました。 冗長性のために２つのリージョンに分散させたりもしました。 目新しいことはないですが、わりと運用が楽な感じに作れたのでほんとによかったなと振り返って思います。  (2) インターネットから社内NWへの入口としてのリバプロサーバ構築 インターネットから社内NWにあるシステムを利用できるようにするために、
リバースプロキシサーバを構築しました。（運用はこれから）
いわゆるDMZ構成におけるリバプロです。
 技術的なところで言うと、corosync+pacemakerを使ってクラスタリングを組みました。  クラスタリングは思ったより奥が深く、どのようなクラスタを組むかかなり苦労しました。 障害時に相手側サーバの電源を落とす、いわゆるフェンシングなどをどう適切に使うかなど。 運用が始まってからそのあたりの実用性が確認できそうです。 ちなみにNginxでリバースプロキシたてました。  (3) 仮想環境構築とか 仮想環境というと、今までVagrantなどのツールとして、AWS、VPSなどのIaaSとして使うばかりでした。
今年は、KVMを利用してプロダクションの仮想基盤を作るなどやりました。
仮想化ってそもそもなんだっけ？というもう少し基礎よりの知識と向き合う機会がありました。
また、主に来年の話になるがOpenStackなどを使ったクラウド環境を「作る・運用する」にも携わっていきそうです。
すこしづつOpenStackをかじり始めました。
(4) Ansibleの活用と布教活動 Ansibleの利用は去年から始めていたことですが、
今年はより活用することと、社内での布教活動を行いました。
活用でいうと、サーバの構築はAnsibleで行ってアプリケーションのデプロイは
別の方法でやる（手動とか…）というふうになっていたので、
Ansibleを使ってアプリケーションのデプロイまですべて行うようにしてきました。
また、こういった取り組みを社内（部内）で広めて他のチームにも活用してもらおうと、</description>
    </item>
    
    <item>
      <title>インフラテスト(serverspec)はじめました</title>
      <link>https://blog.mosuke.tech/entry/2015/11/02/161744/</link>
      <pubDate>Mon, 02 Nov 2015 16:17:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/11/02/161744/</guid>
      <description>※執筆後、業務でもserverspecを利用し始めたのもあり、業務レベルでの実践例も追記している。
運営中のVim::Factoryでserverspecを使ったインフラテストを導入したので、 導入理由や工夫している点、悩んでいる点について記述します。
Vim::Factoryについてはこっちみてね。 DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った - Goldstine研究所 1. serverspecってなによ 詳しくは公式サイトや書籍などを参考にして欲しいですが、
「サーバの状態をコードで自動的にテスト・確認するためのツール」です。
Serverspec - Home
例えば、ApacheでWebサーバを組んでいるサーバがあったとして、下記の要件で動いているとします。
  apacheがインストールされていること  apacheが起動していること、自動起動する設定であること ポート80があいていること  この要件をサーバが満たしているかコードでテストします。
上記の例だとこんなコードを書きます。
describe package(&#39;httpd&#39;) do it { should be_installed } end describe service(&#39;httpd&#39;) do it { should be_enabled } it { should be_running } end describe port(80) do it { should be_listening } end  各種テストの立ち位置 
 serverspecは、サーバの状態（正しく設定されたか）を確認するためのテストツールです サーバの振る舞いのテストは別のツールを使うことをおすすめします また、監視も一種のテストと言えます 一般的には監視はその実行頻度の高さから、振る舞いを監視することが多い 監視ツールで、Configファイルが正しいかは見ない  2. なんで導入したの？ serverspecを導入したのには大きく2つの理由があります。</description>
    </item>
    
    <item>
      <title>インフラテスト(serverspec)はじめました</title>
      <link>https://blog.mosuke.tech/entry/2015/11/02/161744/</link>
      <pubDate>Mon, 02 Nov 2015 16:17:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/11/02/161744/</guid>
      <description>※執筆後、業務でもserverspecを利用し始めたのもあり、業務レベルでの実践例も追記している。
運営中のVim::Factoryでserverspecを使ったインフラテストを導入したので、 導入理由や工夫している点、悩んでいる点について記述します。
Vim::Factoryについてはこっちみてね。 DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った - Goldstine研究所 1. serverspecってなによ 詳しくは公式サイトや書籍などを参考にして欲しいですが、
「サーバの状態をコードで自動的にテスト・確認するためのツール」です。
Serverspec - Home
例えば、ApacheでWebサーバを組んでいるサーバがあったとして、下記の要件で動いているとします。
  apacheがインストールされていること  apacheが起動していること、自動起動する設定であること ポート80があいていること  この要件をサーバが満たしているかコードでテストします。
上記の例だとこんなコードを書きます。
describe package(&#39;httpd&#39;) do it { should be_installed } end describe service(&#39;httpd&#39;) do it { should be_enabled } it { should be_running } end describe port(80) do it { should be_listening } end  各種テストの立ち位置 
 serverspecは、サーバの状態（正しく設定されたか）を確認するためのテストツールです サーバの振る舞いのテストは別のツールを使うことをおすすめします また、監視も一種のテストと言えます 一般的には監視はその実行頻度の高さから、振る舞いを監視することが多い 監視ツールで、Configファイルが正しいかは見ない  2. なんで導入したの？ serverspecを導入したのには大きく2つの理由があります。</description>
    </item>
    
    <item>
      <title>DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った</title>
      <link>https://blog.mosuke.tech/entry/2015/07/19/135844/</link>
      <pubDate>Sun, 19 Jul 2015 13:58:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/07/19/135844/</guid>
      <description>2014年の秋から@mogulla3と定期的にインフラ関連技術の勉強会をやってきましたが、
インプットの勉強会だけでは飽き足らず、いつしかサービスを作る中でインフラ関連技術を駆使し勉強したいと思うように…
そして、普段使っているVimを題材に、
vimの設定をブラウザ上で即体感できるサービス Vim::Factory
を開発しました。
本記事はVim::Factoryの簡単な紹介と技術的な仕組みについて記述しています。
Vim::Factoryはこちら。
http://vimfactory.com/
1. Vim::Factoryについて 1-1. Vim::Factoryってなに？？ Vim::Factoryは、選択したVimの設定を、ブラウザ上で「即体感」できるサービスです。
数多くあり複雑なVimの設定を容易にし、お気に入りのVim探しをサポートすることを目指しています。

1-2. なんで作ったの？ Vimの設定ってたくさんあってどれを選んでいいかわからなかったり、
設定したもののどう変わったかイマイチわからなかったりしませんか？
Vimの設定がどのように反映されるか、もっと簡単に体験したいと考えたからです。
あと、例えばGithubで100star以上をつける人のVimをブラウザ上で体験できたらいいなと思っていて、
それを実現のための第一歩としてこのサービスを作りました。
1-3. このサービスの最大の特徴は？ このサービスの最大の特徴はなんといっても「ブラウザ上でVimが体感できること」です。
今まではVimの設定を試そうと思ったら、ネットで調べて自分のVimに反映させて…という作業が必要でしたが、
ブラウザ上で設定を即体感するという新しい体験を提供するために力を注いできました。
その実現方法については、後述しています。
1-4. 紹介動画 詳しくは、実際に試してもらうのが早いと思いますが、簡単な操作動画を用意してみました。
モバイルからこのサービスはちょっと使えないので、モバイルで読んでいる方は動画でお楽しみください(笑)
www.youtube.com
2. Vim::Factoryの技術について ここからVim::Factoryの技術について一部ではありますがご紹介します。
2-1. ブラウザ上でのVimを実現した技術 ブラウザ上でVimを実現しようと思うと、ぱっと思いつくのはJavaScriptでVimそのものを実装してしまおうというものかもしれません。
ですが、JSでVimを実装することってどれくらい難しいでしょうか？
少なくともぼくにはそんなことはできませんし、できたとして質の悪いものになってしまうと思います。
そこで思いついたのが、一般的なターミナルソフトと同様にサーバ上でvimを起動し、
そのターミナル情報をブラウザ上で表示するという方法です。
この方法であれば自らVimを実装せずともVimを再現できます。イメージは下記のとおりです。

また、サービスとして上記を行うには、接続してきたユーザごとにVimを用意する必要があります。
これらを実現するために利用したのがDockerとWebSocketです。
dockerコンテナ上でVimを起動し、そのターミナル情報をWebSocketでブラウザに送信するようにしました。 
dockerはコンテナ型の仮想化なので起動がとてもはやく、
httpのリクエストが来てからdockerコンテナを立ち上げても十分なほどのはやさをもっています。
2-2. 全体構成 システムの全体構成は以下のような感じです。
※実際の役割は図のとおりですが、サーバはこんなに多くありません。

2-3. 利用した技術とかツールのまとめ 振り返りも兼ねて利用した技術・ツールを一覧にまとめておきます。
 Ruby Sinatra thin node.js Websocket memcached docker nginx centos7 Ansible Vagrant gitlab mackerel slack  esa.</description>
    </item>
    
    <item>
      <title>DockerとWebSocketを使って、vimの設定をブラウザで即体感できるサービスを作った</title>
      <link>https://blog.mosuke.tech/entry/2015/07/19/135844/</link>
      <pubDate>Sun, 19 Jul 2015 13:58:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2015/07/19/135844/</guid>
      <description>2014年の秋から@mogulla3と定期的にインフラ関連技術の勉強会をやってきましたが、
インプットの勉強会だけでは飽き足らず、いつしかサービスを作る中でインフラ関連技術を駆使し勉強したいと思うように…
そして、普段使っているVimを題材に、
vimの設定をブラウザ上で即体感できるサービス Vim::Factory
を開発しました。
本記事はVim::Factoryの簡単な紹介と技術的な仕組みについて記述しています。
Vim::Factoryはこちら。
http://vimfactory.com/
1. Vim::Factoryについて 1-1. Vim::Factoryってなに？？ Vim::Factoryは、選択したVimの設定を、ブラウザ上で「即体感」できるサービスです。
数多くあり複雑なVimの設定を容易にし、お気に入りのVim探しをサポートすることを目指しています。

1-2. なんで作ったの？ Vimの設定ってたくさんあってどれを選んでいいかわからなかったり、
設定したもののどう変わったかイマイチわからなかったりしませんか？
Vimの設定がどのように反映されるか、もっと簡単に体験したいと考えたからです。
あと、例えばGithubで100star以上をつける人のVimをブラウザ上で体験できたらいいなと思っていて、
それを実現のための第一歩としてこのサービスを作りました。
1-3. このサービスの最大の特徴は？ このサービスの最大の特徴はなんといっても「ブラウザ上でVimが体感できること」です。
今まではVimの設定を試そうと思ったら、ネットで調べて自分のVimに反映させて…という作業が必要でしたが、
ブラウザ上で設定を即体感するという新しい体験を提供するために力を注いできました。
その実現方法については、後述しています。
1-4. 紹介動画 詳しくは、実際に試してもらうのが早いと思いますが、簡単な操作動画を用意してみました。
モバイルからこのサービスはちょっと使えないので、モバイルで読んでいる方は動画でお楽しみください(笑)
www.youtube.com
2. Vim::Factoryの技術について ここからVim::Factoryの技術について一部ではありますがご紹介します。
2-1. ブラウザ上でのVimを実現した技術 ブラウザ上でVimを実現しようと思うと、ぱっと思いつくのはJavaScriptでVimそのものを実装してしまおうというものかもしれません。
ですが、JSでVimを実装することってどれくらい難しいでしょうか？
少なくともぼくにはそんなことはできませんし、できたとして質の悪いものになってしまうと思います。
そこで思いついたのが、一般的なターミナルソフトと同様にサーバ上でvimを起動し、
そのターミナル情報をブラウザ上で表示するという方法です。
この方法であれば自らVimを実装せずともVimを再現できます。イメージは下記のとおりです。

また、サービスとして上記を行うには、接続してきたユーザごとにVimを用意する必要があります。
これらを実現するために利用したのがDockerとWebSocketです。
dockerコンテナ上でVimを起動し、そのターミナル情報をWebSocketでブラウザに送信するようにしました。 
dockerはコンテナ型の仮想化なので起動がとてもはやく、
httpのリクエストが来てからdockerコンテナを立ち上げても十分なほどのはやさをもっています。
2-2. 全体構成 システムの全体構成は以下のような感じです。
※実際の役割は図のとおりですが、サーバはこんなに多くありません。

2-3. 利用した技術とかツールのまとめ 振り返りも兼ねて利用した技術・ツールを一覧にまとめておきます。
 Ruby Sinatra thin node.js Websocket memcached docker nginx centos7 Ansible Vagrant gitlab mackerel slack  esa.</description>
    </item>
    
  </channel>
</rss>