<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/aws/</link>
    <description>Recent content in Aws on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 14 Jul 2017 15:33:38 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terraform×Rancherでマルチクラウドを一歩すすめる、を話してきた</title>
      <link>https://blog.mosuke.tech/entry/2017/07/01/master_cloud_malticloud/</link>
      <pubDate>Fri, 14 Jul 2017 15:33:38 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/07/01/master_cloud_malticloud/</guid>
      <description> 7月12日のMasterCloud#3で「Terraform×Rancherでマルチクラウドを一歩すすめる」という題で話してきました。
本記事ではスライドはもちろん、文面で補足しながら話してきた内容をまとめます。
スライド まずは当日のスライドについて公開します。
内容としてはYAPC::Fukuokaの前夜祭で話してきた内容の続きです。
YAPC::Fukuoka前夜祭でLTしてきた。「Rancherでマルチクラウドをやってみる」
 内容解説 はじめに 私は、AlibabaCloudの日本リージョンの担当などを普段しています。
実はAlibabaCloudは去年の12月から日本リージョン開設しています。
マルチクラウド 最近「マルチクラウド」という言葉をよく聞く気がします。
クラウド事業者としてはもちろん、AWSをはじめとするビッグなところだけでなく他の事象者も目を向けてほしいとも思っていますし、
ユーザ目線でもどんなクラウドサービスも落ちることもあるのでバックアップを用意しておきたいと思っているはずです。
あとは、良いサービスがあればマルチクラウドで使いたいというニーズも増えてきています。
マルチクラウドのメリットは他にもたくさんあると考えています。
1.価格を最適化したい クラウドサービスも裏では物理的なハードウェアで動作します。
なので新しいほうが当然ながら安くいいスペックのものが利用できます。
老舗のクラウドサービスもいいですが、新しいハードウェアが入ってきたクラウドサービスでは、 意外に安くいいスペックのものが使えたりします。
そのほか、キャンペーンなどで安くサーバが手に入る場合もあります。
2.DR,BCPとして活用する 1つのクラウドサービスに依存していると、そのサービスに障害が起きた際にサービスが全断しますよね。
最近でもオブジェクトストレージが落ちるなどいろいろニュースがありました。
特定のクラウドサービスに依存しないようにすることで可用性は高まります。
3.サービスロックインを避ける サービスロックインを避けたい、という考え方もあります。
特定の事業者、サービスのやり方に則ることで効率的になるということは過去からよくあることです。
一方で、次のイノベーションが起きたときに、脱却できず苦しんできた歴史もあったかとおもいます。
クラウドサービスでもそういうことは起きうるでしょう。
4.最適サービスを使いたい 今や、クラウドサービスありすぎな時代です。
自社の環境や組織にあったクラウドサービスを組み合わせ利用することは、 事業もコストも最適化することにつながるかもしれません。
Rancher そんなマルチクラウドのメリットがあるなか、Rancherというソフトウェアに出会いました。
RancherはDockerコンテナのオーケストレーションツールです。
特徴としてDockerが動く環境であれば、クラウドサービスの種類やリージョンなど問わず、 Dockerアプリケーションを動かすホストサーバとして利用できオーケストレーションできるツールです。
Rancherでのマルチクラウド Rancherを利用することで、さまざまなクラウドサービスをまたがってDockerアプリケーションをデプロイできます。
YAPC::Fukuoka前夜祭で自分がはなしてきました。
YAPC::Fukuoka前夜祭でLTしてきた。「Rancherでマルチクラウドをやってみる」
一方、このときに話したマルチクラウドは課題がありました。
すべてのアプリケーションをDockerとして動かすことを前提としている点です。
クラウドサービスは仮想サーバサービスばかりではなくデータベースサービスやストレージサービス、PaaSなどさまざまです。
これらをうまく使ってこそ本当のマルチクラウドではないかなと思っていました。
Terraform そこで思い出したのがTerraformです。
構築したいインフラをTerraformの書式で記述することで、Terraformがその通りにインフラを構築してくれるというものです。
Terraformはマルチベンダーで動作するインフラ管理ツールというのがまた特徴的です。
ちなみにAlibabaCloudもTerraform対応ベンダーなのですよ。
RancherとTerraform RancherとTerraformどちらともマルチクラウド的なツールと言えます。
ですが、そのカバーする領域は全く別物です。
Rancherはアプリケーションの動作環境（仮想サーバ）をマルチクラウド化します。
Terraformはクラウドサービス（マルチベンダー）の提供する様々なサービスの操作や管理を可能にします。
この２つを上手く使うと何か面白いことができるのはないか、そう考えました。
たとえば Rancherを使いつつ、仮想サーバだけでなくクラウド事業者の提供するサービスを組み合わせるとどういうことがきるのか。
例えばだが、サービス基盤はAlibabaCloudを使う。理由はDBサービスが優れているから。最新のCPUインスタンスを利用できるから。
しかし、データ分析はAWSのS3を起点としたワークフローが便利と思っている。
S3にデータを集め、Athenaを使うもよし、AWS上にRancherでHadoopを構築するもよし。
こういった使い方が簡単に出来るようになるのです。
デモンストレーション デモンストレーションでは、下記2つを主に行った。
 Terraformを使ってマルチベンダーのRancherホストを管理する方法 Rancher上で動くコンテナからAlibabaCloudのデータベースサービスを利用する方法  </description>
    </item>
    
    <item>
      <title>AWS Summit2017 Day2のぞいてきた。 ネットワーク設計入門メモ</title>
      <link>https://blog.mosuke.tech/entry/2017/05/31/aws_summit_network/</link>
      <pubDate>Wed, 31 May 2017 19:25:20 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/05/31/aws_summit_network/</guid>
      <description>はじめに 弊社はプレミアムフライデー導入企業なのだが、最終金曜日に早く帰る必要はなく、月内でどこか1日15時に帰りましょうという制度になっている。
金曜日が仕事の都合上取れなかったので、今月は5/31にプレミアムフライデー（プレミアムウェンズデー）を使った。
ちょうどAWS Summit開催中だったのでのぞきにいった。
雰囲気 想像していた雰囲気とはだいぶ異なっていたというのが第一印象。
想像以上にスーツの年齢層の高い人が多かった。それだけ、AWSもエンタープライズでも注目されるようになったということだろう。
以前に、JAWS2015に参加したことある。もちろんJAWSとAWS Summitでは参加者の層が違う。
が、あれから2年たちAWSに興味を持つ層も大きく変わってきたのを感じた。
セッションも非IT企業への導入事例や、思ったより入門セッションも多かった。
登壇者の話しぶりも「オンプレからの移行」を意識したように感じた。
ブース セッションだけではなく、AWSに関連するサービスを提供している企業がたくさんブースをだしている。
ここでのコミュニケーションが案外一番楽しい。お酒も用意されていて楽しくおしゃべりできた。
Heroku+AWSの組み合わせで利用するケースの話を聞いて、あーなるほどねって感じだった。
HerokuはAWS上で動作しているし、インターネット経由してもそこまで遅くはならない。
そんな利点を使って組み合わせて使う事例なんかきいた。
そのほかは、やっぱりどこもかしこもコンテナ。
コンテナをどう扱うか、どう監視するか、そんなところの話が多かった。
セッション「ネットワーク設計入門」 セッションは１つだけ「ネットワーク設計入門」を聞いた。
普段ならネットワーク設計入門のセッションは聞かないと思っているのだが、
どんなことを話すのか興味あって聞いてみた。
(1)クラウド上のNWの特徴  物理設計はいらない 可用性はすでにセット(VRRPなど気にしなくてよい） プロフラマブルに操作可能  (2)NWサービス NWサービスは意外とすくない。VPCがほぼすべて。
VPCが本質であり、ここが理解できればほぼ問題ない。
 VPC Direct Connect Route53  (3)前提知識 VPC 物理設計はいらないんだけど、
やっぱり物理知っていることがアドバンテージになる。 VPCはリージョンの中のみ。ゾーンはまたぐことができる。
専用線 当たり前だがDCの場所は公開していない。
じゃどうやって接続するか？
相互接続接続ポイントを用意しているからそこにつなぎに来てね、という考え方。
エッジロケーション CDNノードやRoute53が動作しているところ。
リージョンとはまた別にある。
(4)設計をはじめよう AWSのどのサービスを使いたいかでNWの設計方針はかわる。
まずはVPCの中で利用するサービスとVPCの外で使うものがあるのでその区別。
 VPCの中で使うもの  EC2とかRDSとかRedshift、EMR  VPCの外で使うもの  S3、LamdaとかDynamoDB、CloudWatch   次に、外部通信の設計
 VPCと外部を接続する場合  専用線orインターネットVPNorパブリック(ssh/https)  VPCがないけど外部から利用したい場合  httpsでまかなう場合が多い。 実は、VPCがなくてもDicrectConnectは使えるよ。  DirectConnectのパブリック接続    (5)プライベートNW設計のステップ  VPCの作成  VPCのCIDRレンジは変えられないから大きくとっておこう オンプレミスとのレンジも被らないように /16がおすすめ  サブネット作成  インターネットに接続するものとしないもの。ここでサブネット分けよう AZが落ちてもいいように設計しよう。サブネットは２つずつ サブネットサイズは24がおすすめ  VPCコンポーネントの作成  カスタマーGW インターネットGW VPC単位、サブネット単位、インスタンス単位で配置できるコンポーネントがあるよ  インスタンスの配置  セキュリティポリシーを考えよう セキュリティグループとネットワークACLがあるよ セキュリティグループのほうが柔軟  名前解決の検討  (6)ユースケースごとのNW設計 公開サービスの場合  インターネットから接続でいるのはロードバランサーだけにしよう  あるいはあとはメンテナンス用の踏み台サーバだけ  S3を活用するときは、VPCエンドポイントつかえばVPC内部から接続できるよ 管理拠点とはVPNでつなぐことをおすすめするよ 管理拠点とのルーティングはルートテーブル DNSはRoute53使うと便利だよ  ALIASレコードという独自機能 DNSのフェイルオーバー機能  ソーリーページへの転送が可能    社内システム基盤の場合  DirectConnectを使おう  パートナーがたくさんいるので連絡してみよう  Route53はプライベートゾーン、オンプレからVPC内の名前解決にも使えるよ DirectConnect体験ラボあるからつかってみて  https://aws.</description>
    </item>
    
    <item>
      <title>参加してきた、MSPJマイグレーションコンペ2017winter</title>
      <link>https://blog.mosuke.tech/entry/2017/02/20/184220/</link>
      <pubDate>Mon, 20 Feb 2017 18:42:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/02/20/184220/</guid>
      <description>先日、2017年2月18日に「MSPJマイグレーションコンペティション2017winter」に参加してきた。
MSPJマイグレーションコンペティション2017winterとは、
日本MSP協会コンペティショングループが主催する、 次代を担う若手運用技術者同士の交流・競争を通して日本のMSP事業者における運用技術の向上を目指したコンペティション。
もう少し平たく言うと、MSP事業者の本当の業務に近い形でのコンペを通じて、スキルアップを図りましょうというものだ。
自分はMSPの人じゃないけど参加は全然できた。
connpass.com
競技ルール 今回の競技のお題は、
「AWS上で動作しているレガシーなRedmineをAzure上に移行する」というものだ。
このコンペの特徴としては、実際にMSPでの業務に則し、お客さんから曖昧な要望を受けている部分や、
お客さん側にしかない権限については、お客さんと調整する必要があること。
例えば、環境の移行する際にはDNSの切り替えが必要だったのですが、DNSの設定権限は我々にはなくて、
Slackを利用して、DNS設定変更依頼や作業周知を出さなければいけなかった。
このあたりはとてもユニークなポイント。
お客さんからは移行について以下のような曖昧な要望をもらっていた。
&amp;lt;要望&amp;gt; - 今の環境を新しい環境に完全移行して欲しいです。 - 実施した内容と結果については報告が欲しいです。 - システムを止めるときは利用者に告知が必要なので連絡が欲しいです。 - 昔から使っている古い環境なので、バージョンアップして欲しいです。 - できれば利用者に影響を出さないように切り替えたいです。 - できればサーバに関する資料があるとありがたいです。 - できれば今はまったくバックアップを取っていないのでバックアップを取れるようにしたいです - できれば今後は利用者が増えるのでシステムを冗長化したいです。 - できれば新しいインフラエンジニアに引継ぎするために必要な情報がまとまっていると嬉しいです。 &amp;lt;担当者のコメント&amp;gt; - 前任のインフラエンジニアが辞めちゃったのでこのシステムもう分かる人がいなくって。 - 結構前から使っているので環境も古くなっているみたいで、OSのサポートがもうすぐ切れるって話を聞いたものですから、セキュリティとか色々心配で何とかしたいんです。 - みんなこのシステムを結構便利に使っていてくれているようだから、システムを切り替えるときは連絡しないとなぁ。 - そうそう、近々新しいインフラエンジニアが入社予定だから、その方に引き継げるようになっていると嬉しいですね。  ちなみにチームについては、当日の参加者で適当に3人チームを作って行った。
一緒の参加者が同じチームにならないように調整された。
構成把握 開始後、まずやったことが環境・構成の把握。
ざっと下記のような感じ。ログインしてすぐに、pstree みて大体の構成を把握した。
 インフラ: AWS(EC2) OS: CentOS5.2 Webサーバ: Apache2.0 + Passenger DB: MySQL5.1  Ruby: 1.9  Redmine: 2.3  DNS; Route53で管理。権限はお客さんのみ サーバ構成: サーバ1台のシングル構成  移行作戦 細かなバージョンはおいておいて、最終的に目指す構成は下記のようにした。</description>
    </item>
    
    <item>
      <title>クラウド上でのWordPressのスケールアウトを考える</title>
      <link>https://blog.mosuke.tech/entry/2017/01/04/223544/</link>
      <pubDate>Wed, 04 Jan 2017 22:35:00 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/01/04/223544/</guid>
      <description>複数台サーバでのWordPressの構築・運用について考える。
実際に、とあるクラウドで分散環境のWordPressを構築したのでその知見をまとめる。
なるべく特定のクラウドに特価しないものとして記載したい。
やりたいこと  スケールアウトできるWordPress環境を作る  SSLに対応する HTTP/2に対応する  AWSなどのクラウド環境で構築する  アーキテクチャ まず先に全体のアーキテクチャ図から示す。
これから各項目について解説していく。

 SSL・HTTP/2への対応 まずSSLへの対応だが、通常ならばロードバランサをSSLの終端とし下記のような構成にすることが多いだろう。
この場合はロードバランサをL7のものとして稼働させる。

しかし、HTTP/2に対応しようと思うと事情は異なってくる。
（もちろん、最近ではAWSのALBのようにHTTP/2に対応する製品がでてきているのは承知だが。）
現在のパブリッククラウドで利用できるロードバランサの多くはまだHTTP/2に対応していない。
そのため、ロードバランサをL4として稼働させ、配下のWebサーバにてHTTP/2を処理する必要がでてくる。
この場合、ロードバランサはTCPでポート443を待ち受けるようにし、配下のWebサーバへポート443のままでフォワードすればいい。

クラウド環境ではWebサーバがスケールすることは前提にいれることがおおい。
そのため、この場合のSSL証明書はN台に対応した製品を買う必要がある。
例えば以下のような製品など。
 SureServer for クラウド｜Cybertrust.ne.jp  データベースの分離 分散環境でのWordpressでは共通したコンテンツを配信するため、データベースはもちろんWebサーバとは分離したほうがいい。
それぞれのWebサーバは共通のデータベースを見に行くべきだ。
データベースを自前で冗長化しても構わないが、それなりの運用コストがかかることは容易に想像がつくので、
クラウドのマネージドデータベースサービスを利用した。
 Amazon RDS（クラウドでのリレーショナルデータベースサービス） | AWS ApsaraDB for RDS - データベースホスティング | Alibaba Cloud  管理画面 管理画面のみを分離するアーキテクチャも考えられるが、ここではそうしないこととする。
管理画面へのログインセッションの保持は、別途KVS(RedisやMemcached)に保存してもいいと思う。
ですが、WordPress4.0以降ではデフォルトではMySQLへセッションを保存するので必須の対応ではないといえる。
github.com
記事で使うアップロード画像などの対応 管理画面から記事を投稿するとする。
記事のデータはデータベースに保存されるためどのWebサーバからも記事を参照できる。
しかし、記事に含まれる画像データはどうだろうか。
通常のWordpressでは管理画面サーバの/wp-content/uploads以下に画像を保存する。
複数台Webサーバがある状態で、たまたまアクセスしているサーバに画像を保存しても、他のサーバからは参照することができない。
これに対するソリューションはいくつかあるだろう。
例えば、rsyncなどを使って他のサーバと画像ファイルを同期するとか、画像用のストレージを用意しNFSで参照するとか。
冗長化の観点からもここはオブジェクトストレージのサービスを利用するのがいいだろう。
例えば、下記のような製品だ。</description>
    </item>
    
  </channel>
</rss>