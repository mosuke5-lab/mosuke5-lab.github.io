<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloudflare on Goldstine研究所</title>
    <link>https://blog.mosuke.tech/categories/cloudflare/</link>
    <description>Recent content in Cloudflare on Goldstine研究所</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 29 May 2017 20:06:31 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mosuke.tech/categories/cloudflare/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CloudFlare APIを使ってキャッシュを削除する</title>
      <link>https://blog.mosuke.tech/entry/2017/05/29/how_to_use_cloudflare_api/</link>
      <pubDate>Mon, 29 May 2017 20:06:31 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/05/29/how_to_use_cloudflare_api/</guid>
      <description>はじめに 最近ブログをはてなブログからHugoへ移行した。
HugoのフロントにCloudFlareを利用している。
ブログ移行についてはこちらを参照。
「はてなブログからHugoに移行。その際に行ったあれこれ。」
コンテンツをアップロードした場合などにCloudFlareのキャッシュを削除したく、
APIを利用して効率よく作業できる環境を整えた。
使い方 CloudFlareのAPIドキュメントはかなり充実している。
キャッシュの全削除については下記に記載がある。
https://api.cloudflare.com/#zone-purge-all-files
利用方法をみると、DELETE /zones/:identifier/purge_cacheとあるが、
:identifierがなんのことかはじめわからずはじめ苦戦した。
identifierの確認 identifierは下記APIで確認できる。
このAPIで返ってくるはじめのidがidenitiferだ。
curl -X GET &amp;quot;https://api.cloudflare.com/client/v4/zones \ ?name=&amp;lt;your site&amp;gt; \ &amp;amp;status=active \ &amp;amp;page=1 \ &amp;amp;per_page=20 \ &amp;amp;order=status \ &amp;amp;direction=desc \ &amp;amp;match=all&amp;quot; \ -H &amp;quot;X-Auth-Email: &amp;lt;your email&amp;gt;&amp;quot; \ -H &amp;quot;X-Auth-Key: &amp;lt;your api key&amp;gt;&amp;quot; \ -H &amp;quot;Content-Type: application/json&amp;quot;  { &amp;quot;result&amp;quot;: [ { &amp;quot;id&amp;quot;: &amp;quot;xxxxxxxxxxxxxxxxxxxxxxx&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mosuke.tech&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;active&amp;quot;, &amp;quot;paused&amp;quot;: false, &amp;quot;type&amp;quot;: &amp;quot;full&amp;quot;, &amp;quot;development_mode&amp;quot;: 0, &amp;quot;name_servers&amp;quot;: [ &amp;quot;rudy.</description>
    </item>
    
    <item>
      <title>はてなブログからHugoに移行。その際に行ったあれこれ。</title>
      <link>https://blog.mosuke.tech/entry/2017/05/28/blog_migration/</link>
      <pubDate>Sun, 28 May 2017 13:02:14 +0900</pubDate>
      
      <guid>https://blog.mosuke.tech/entry/2017/05/28/blog_migration/</guid>
      <description>1.はじめに 2017年5月27日に2014年2月から約3年3ヶ月程度使ってきたはてなブログからHugoを使ったブログへ移行をした。
長らく使いやすいブログを提供してきたはてなさんにはとても感謝している。
はてなブログはとても魅力なブログプラットフォームであると感じているし、いまでもそう思うのだけれどいくつかの判断をした結果Hugoへの移行を決めた。
本記事では、移行を決めた理由や移行する際に行ったこと、Hugoの実行環境などを紹介する。
2.Hugoに移行した理由 Hugoに移行した理由というか、はてなブログから別のところに移行しようとした理由になるのだが、
端的に言うと以下のとおりだ。
 常時SSL化したかった HTTP/2に対応したかった 独自ドメイン(mosuke.tech)を利用したかった  Hugo以外にももちろん他のツールやサイトも検討を行った。
 はてなブログPro jekyll medium  まず、はてなブログProだが、もっとも手間がかからず独自ドメイン利用もできてよかったのだが、
SSL化とHTTP/2化はやはり難しかったので外部を検討した。
次にGithub製のJelyllだが、Github Pagesとの相性もよくはじめに検討はじめたものだった。
Ruby製ということもあり、自分に馴染みのあるツールで最有力候補だった。
しかし、後発のHugoの完成度の高さ、コンパイルの速さ、気に入ったテンプレートがあった、という理由でHugoに劣った。
最後にmediumだが、自前で構築することなくやりたいことのすべてを実現していた。
正直一番いいのではないかとも思う（笑）
最終的には、よりカスタマイズ度の高いHugoを選んだ。特にこれといった理由はない。
ちょうどGo言語をやってみたいモチベーションがあったので、これをきっかけに勉強がはかどればいいなぁくらいの気持ちはあった。
3.移行に際して行ったこと 3-1.Hugoでのサイト構築、アーキテクチャ Github上でHugoを管理し、コンパイルしてできたPublicファイルを、Github Pages対応の別のレポジトリで管理。
独自ドメイン利用、SSL対応、HTTP/2対応するためにフロントにCloudFlareを利用した。
後述するが、CloudFlareはとても便利なツールだが、キャッシュの扱いは気をつけてなければいけない。
図にすると以下のとおりだ。
3-2.記事の移行 はてなブログはそのままのこし、新規に書くブログからHugoへ移行することも検討したが、
せっかくなのではてなブログ時代に書いた記事もすべて移行することを決めた。
はてなブログからデータのエクスポートができる。
エクスポートしたファイルを簡単なスクリプトを作ってHugoファイルへの変換を行った。（Github mosuke5/hatena-blog-parser）
正直このツールは汎用的なものではない。このスクリプトだけではうまく行かない部分も多数ある。
いくぶんかsedなど使って（たまに手動編集・・・）して整えた。。
はてなブログのエクスポートファイルのフォーマット -------- AUTHOR: mosuke5 TITLE: 万能じゃない。オブジェクトストレージの仕組みと利用を正しく理解する BASENAME: 2017/03/18/182252 STATUS: Publish ALLOW COMMENTS: 1 CONVERT BREAKS: 0 DATE: 03/18/2017 18:22:52 CATEGORY: オブジェクトストレージ CATEGORY: ObjectStorage CATEGORY: クラウド CATEGORY: S3 IMAGE: https://cdn-ak.</description>
    </item>
    
  </channel>
</rss>